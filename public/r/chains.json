{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chains",
  "type": "registry:lib",
  "title": "chains",
  "description": "Centralized chain configuration with Alchemy RPC support",
  "dependencies": [
    "viem"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/mini-app/lib/chains.ts",
      "content": "import { http, type Chain, type PublicClient, createPublicClient } from \"viem\";\nimport * as chains from \"viem/chains\";\n\n/**\n * Supported chains configuration with Alchemy RPC support\n */\nexport const SUPPORTED_CHAINS = [\n  { id: 1, chain: chains.mainnet, alchemyPrefix: \"eth-mainnet\" },\n  { id: 8453, chain: chains.base, alchemyPrefix: \"base-mainnet\" },\n  { id: 42161, chain: chains.arbitrum, alchemyPrefix: \"arb-mainnet\" },\n  { id: 421614, chain: chains.arbitrumSepolia, alchemyPrefix: \"arb-sepolia\" },\n  { id: 84532, chain: chains.baseSepolia, alchemyPrefix: \"base-sepolia\" },\n  { id: 666666666, chain: chains.degen, alchemyPrefix: \"degen-mainnet\" },\n  { id: 100, chain: chains.gnosis, alchemyPrefix: \"gnosis-mainnet\" },\n  { id: 10, chain: chains.optimism, alchemyPrefix: \"opt-mainnet\" },\n  { id: 11155420, chain: chains.optimismSepolia, alchemyPrefix: \"opt-sepolia\" },\n  { id: 137, chain: chains.polygon, alchemyPrefix: \"polygon-mainnet\" },\n  { id: 11155111, chain: chains.sepolia, alchemyPrefix: \"eth-sepolia\" },\n  { id: 7777777, chain: chains.zora, alchemyPrefix: \"zora-mainnet\" },\n  { id: 130, chain: chains.ham, alchemyPrefix: \"unichain-mainnet\" }, // Unichain\n  {\n    id: 10143,\n    chain: {\n      id: 10143,\n      name: \"Monad Testnet\",\n      network: \"monad-testnet\",\n      nativeCurrency: { name: \"Monad\", symbol: \"MON\", decimals: 18 },\n      rpcUrls: {\n        default: { http: [\"https://testnet.monad.xyz\"] },\n        public: { http: [\"https://testnet.monad.xyz\"] },\n      },\n    } as const,\n    alchemyPrefix: null,\n  },\n  { id: 42220, chain: chains.celo, alchemyPrefix: null },\n] as const;\n\n/**\n * Get viem Chain object by ID\n */\nexport function getChainById(chainId: number): Chain {\n  const config = SUPPORTED_CHAINS.find((c) => c.id === chainId);\n  return config?.chain || chains.mainnet;\n}\n\n/**\n * Get HTTP transport with optional Alchemy RPC URL\n * Falls back to public RPC if no Alchemy key is available\n */\nexport function getTransport(chainId: number) {\n  const alchemyKey = process.env.NEXT_PUBLIC_ALCHEMY_KEY;\n  const config = SUPPORTED_CHAINS.find((c) => c.id === chainId);\n\n  if (config?.alchemyPrefix && alchemyKey) {\n    return http(\n      `https://${config.alchemyPrefix}.g.alchemy.com/v2/${alchemyKey}`,\n    );\n  }\n\n  // Fallback to default public RPC\n  return http();\n}\n\n/**\n * Create a public client for a specific chain with optimal transport\n */\nexport function getPublicClient(chainId: number): PublicClient {\n  return createPublicClient({\n    chain: getChainById(chainId),\n    transport: getTransport(chainId),\n  }) as PublicClient;\n}\n\n/**\n * Find chain by network name (case-insensitive)\n */\nexport function findChainByName(networkName: string): Chain | undefined {\n  const normalizedName = networkName.toLowerCase().trim();\n  \n  // Direct name mappings\n  const nameToId: Record<string, number> = {\n    ethereum: 1,\n    mainnet: 1,\n    base: 8453,\n    arbitrum: 42161,\n    \"arbitrum one\": 42161,\n    \"arbitrum sepolia\": 421614,\n    \"base sepolia\": 84532,\n    degen: 666666666,\n    gnosis: 100,\n    optimism: 10,\n    \"optimism sepolia\": 11155420,\n    polygon: 137,\n    sepolia: 11155111,\n    \"ethereum sepolia\": 11155111,\n    zora: 7777777,\n    unichain: 130,\n    ham: 130,\n    \"monad testnet\": 10143,\n    monad: 10143,\n    celo: 42220,\n  };\n  \n  const chainId = nameToId[normalizedName];\n  return chainId ? getChainById(chainId) : undefined;\n}\n",
      "type": "registry:lib"
    }
  ]
}