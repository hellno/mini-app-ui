{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-miniapp-sdk",
  "type": "registry:hook",
  "title": "useMiniAppSdk",
  "description": "Hook for Farcaster MiniApp SDK context and state",
  "dependencies": [
    "@farcaster/frame-core",
    "@farcaster/frame-sdk",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport sdk from \"@farcaster/frame-sdk\";\r\nimport type { Context } from \"@farcaster/frame-core\";\r\nexport function useMiniAppSdk() {\r\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\r\n\r\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\r\n  const [context, setContext] = useState<Context.FrameContext>();\r\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\r\n  const [lastEvent, setLastEvent] = useState(\"\");\r\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\r\n  const [isSigningIn, setIsSigningIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!sdk) return;\r\n\r\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\r\n      setLastEvent(\r\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\r\n      );\r\n      setIsMiniAppSaved(true);\r\n    });\r\n\r\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\r\n      setLastEvent(`frameAddRejected, reason ${reason}`);\r\n    });\r\n\r\n    sdk.on(\"frameRemoved\", () => {\r\n      setLastEvent(\"frameRemoved\");\r\n      setIsMiniAppSaved(false);\r\n    });\r\n\r\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\r\n      setLastEvent(\"notificationsEnabled\");\r\n    });\r\n\r\n    sdk.on(\"notificationsDisabled\", () => {\r\n      setLastEvent(\"notificationsDisabled\");\r\n    });\r\n\r\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\r\n    sdk.actions.ready({});\r\n    setIsSDKLoaded(true);\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      sdk.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateContext = async () => {\r\n      const frameContext = await sdk.context;\r\n      if (frameContext) {\r\n        setContext(frameContext);\r\n        setIsMiniAppSaved(frameContext.client.added);\r\n      }\r\n    };\r\n\r\n    if (isSDKLoaded) {\r\n      updateContext();\r\n    }\r\n  }, [isSDKLoaded]);\r\n\r\n  const pinFrame = useCallback(async () => {\r\n    try {\r\n      const result = await sdk.actions.addFrame();\r\n      console.log(\"addFrame result\", result);\r\n      // @ts-expect-error - result type mixup\r\n      if (result.added) {\r\n        setPinFrameResponse(\r\n          result.notificationDetails\r\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\r\n            : \"Added, got no notification details\",\r\n        );\r\n      }\r\n    } catch (error) {\r\n      setPinFrameResponse(`Error: ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    context,\r\n    pinFrame,\r\n    pinFrameResponse,\r\n    isMiniAppSaved,\r\n    lastEvent,\r\n    sdk,\r\n    isSDKLoaded,\r\n    isAuthDialogOpen,\r\n    setIsAuthDialogOpen,\r\n    isSigningIn,\r\n  };\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry\\mini-app\\hooks\\use-miniapp-sdk.ts",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport sdk from \"@farcaster/frame-sdk\";\r\nimport type { Context } from \"@farcaster/frame-core\";\r\nexport function useMiniAppSdk() {\r\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\r\n\r\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\r\n  const [context, setContext] = useState<Context.FrameContext>();\r\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\r\n  const [lastEvent, setLastEvent] = useState(\"\");\r\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\r\n  const [isSigningIn, setIsSigningIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!sdk) return;\r\n\r\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\r\n      setLastEvent(\r\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\r\n      );\r\n      setIsMiniAppSaved(true);\r\n    });\r\n\r\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\r\n      setLastEvent(`frameAddRejected, reason ${reason}`);\r\n    });\r\n\r\n    sdk.on(\"frameRemoved\", () => {\r\n      setLastEvent(\"frameRemoved\");\r\n      setIsMiniAppSaved(false);\r\n    });\r\n\r\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\r\n      setLastEvent(\"notificationsEnabled\");\r\n    });\r\n\r\n    sdk.on(\"notificationsDisabled\", () => {\r\n      setLastEvent(\"notificationsDisabled\");\r\n    });\r\n\r\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\r\n    sdk.actions.ready({});\r\n    setIsSDKLoaded(true);\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      sdk.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateContext = async () => {\r\n      const frameContext = await sdk.context;\r\n      if (frameContext) {\r\n        setContext(frameContext);\r\n        setIsMiniAppSaved(frameContext.client.added);\r\n      }\r\n    };\r\n\r\n    if (isSDKLoaded) {\r\n      updateContext();\r\n    }\r\n  }, [isSDKLoaded]);\r\n\r\n  const pinFrame = useCallback(async () => {\r\n    try {\r\n      const result = await sdk.actions.addFrame();\r\n      console.log(\"addFrame result\", result);\r\n      // @ts-expect-error - result type mixup\r\n      if (result.added) {\r\n        setPinFrameResponse(\r\n          result.notificationDetails\r\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\r\n            : \"Added, got no notification details\",\r\n        );\r\n      }\r\n    } catch (error) {\r\n      setPinFrameResponse(`Error: ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    context,\r\n    pinFrame,\r\n    pinFrameResponse,\r\n    isMiniAppSaved,\r\n    lastEvent,\r\n    sdk,\r\n    isSDKLoaded,\r\n    isAuthDialogOpen,\r\n    setIsAuthDialogOpen,\r\n    isSigningIn,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}