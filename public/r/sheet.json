{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sheet",
  "type": "registry:ui",
  "description": "Sheet component",
  "dependencies": [
    "@radix-ui/react-dialog",
    "class-variance-authority",
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "https://hellno-mini-app-ui.vercel.app/r/utils.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/ui/sheet.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/registry/mini-app/lib/utils\"\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition-all duration-300 ease-in-out border rounded-lg\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-4 top-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom: \"inset-x-4 bottom-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-4 left-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\n        right: \"inset-y-4 right-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\n      },\n    },\n    defaultVariants: {\n      side: \"bottom\",\n    },\n  }\n)\n\ninterface SheetProps {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  children: React.ReactNode\n}\n\ninterface SheetContentProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof sheetVariants> {\n  onClose?: () => void\n}\n\nconst SheetContext = React.createContext<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}>({\n  open: false,\n  onOpenChange: () => {},\n})\n\nexport function Sheet({ open = false, onOpenChange, children }: SheetProps) {\n  return (\n    <SheetContext.Provider value={{ open, onOpenChange: onOpenChange || (() => {}) }}>\n      {children}\n    </SheetContext.Provider>\n  )\n}\n\nexport function SheetTrigger({ \n  children, \n  onClick,\n  ...props \n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  const { onOpenChange } = React.useContext(SheetContext)\n  \n  return (\n    <button\n      onClick={(e) => {\n        onOpenChange(true)\n        onClick?.(e)\n      }}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport function SheetContent({ \n  side = \"bottom\", \n  className, \n  children, \n  onClose,\n  ...props \n}: SheetContentProps) {\n  const { open, onOpenChange } = React.useContext(SheetContext)\n\n  const handleClose = () => {\n    onOpenChange(false)\n    onClose?.()\n  }\n\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && open) {\n        handleClose()\n      }\n    }\n\n    if (open) {\n      document.addEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"hidden\"\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"unset\"\n    }\n  }, [open])\n\n  if (!open) return null\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40\"\n        onClick={handleClose}\n      />\n      \n      {/* Sheet Content */}\n      <div\n        className={cn(sheetVariants({ side }), className)}\n        data-state={open ? \"open\" : \"closed\"}\n        {...props}\n      >\n        {children}\n        <button\n          onClick={handleClose}\n          className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none p-1\"\n        >\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport function SheetClose({ \n  children, \n  onClick,\n  ...props \n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  const { onOpenChange } = React.useContext(SheetContext)\n  \n  return (\n    <button\n      onClick={(e) => {\n        onOpenChange(false)\n        onClick?.(e)\n      }}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport function SheetHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col space-y-2 text-center sm:text-left\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function SheetFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function SheetTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h2\n      className={cn(\"text-lg font-semibold text-foreground\", className)}\n      {...props}\n    />\n  )\n}\n\nexport function SheetDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <p\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n} ",
      "type": "registry:ui"
    },
    {
      "path": "registry/mini-app/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
      "type": "registry:lib",
      "target": ""
    }
  ]
}