{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "onchain-user-search",
  "type": "registry:component",
  "title": "Onchain User Search",
  "description": "Unified search for team members and friends across Farcaster usernames, ENS names, and Ethereum addresses. Resolves in all three directions with onchain address as primary interface.",
  "dependencies": [
    "lucide-react",
    "viem",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@farcaster/miniapp-sdk",
    "@farcaster/miniapp-core"
  ],
  "registryDependencies": [
    "button",
    "input",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json",
    "https://hellno-mini-app-ui.vercel.app/r/utils.json",
    "https://hellno-mini-app-ui.vercel.app/r/chains.json",
    "https://hellno-mini-app-ui.vercel.app/r/text-utils.json",
    "https://hellno-mini-app-ui.vercel.app/r/address-utils.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/onchain-user-search/onchain-user-search.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Input } from \"@/registry/mini-app/ui/input\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { Search, User, Users, X, AtSign, Wallet } from \"lucide-react\";\nimport { formatLargeNumber } from \"@/registry/mini-app/lib/text-utils\";\nimport { cn } from \"@/registry/mini-app/lib/utils\";\nimport {\n  detectInputType,\n  formatAddress,\n  normalizeAddress,\n  addressesEqual,\n} from \"@/registry/mini-app/lib/address-utils\";\nimport { createPublicClient, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\nimport { getAlchemyEndpoint } from \"@/registry/mini-app/lib/chains\";\n\n// Types based on Neynar API response\nexport type FarcasterUser = {\n  fid: number;\n  username: string;\n  display_name: string;\n  pfp_url: string;\n  follower_count: number;\n  following_count: number;\n  power_badge?: boolean;\n  profile?: {\n    bio?: {\n      text?: string;\n    };\n  };\n  verified_addresses?: {\n    eth_addresses?: string[];\n  };\n};\n\nexport type NeynarSearchResponse = {\n  result: {\n    users: FarcasterUser[];\n    next?: {\n      cursor: string;\n    };\n  };\n};\n\nexport type NeynarBulkAddressResponse = {\n  \"0x...\": FarcasterUser[];\n};\n\n// Unified user type that combines all identities\nexport type UnifiedUser = {\n  // Primary identifier is the onchain address\n  primaryAddress: string;\n  // ENS name if available\n  ensName?: string;\n  // Farcaster profile if available\n  farcaster?: FarcasterUser;\n  // Additional addresses associated with this user\n  addresses: string[];\n  // Source of the result\n  source: \"farcaster\" | \"ens\" | \"address\";\n};\n\ntype OnchainUserSearchProps = {\n  apiKey: string;\n  alchemyApiKey?: string;\n  placeholder?: string;\n  variant?: \"destructive\" | \"secondary\" | \"ghost\" | \"default\";\n  className?: string;\n  inputClassName?: string;\n  buttonClassName?: string;\n  layout?: \"horizontal\" | \"vertical\";\n  showIcon?: boolean;\n  autoSearch?: boolean;\n  maxResults?: number;\n  searchFunction?: (\n    query: string,\n    apiKey: string,\n    maxResults: number,\n    cursor?: string,\n  ) => Promise<{ users: UnifiedUser[]; nextCursor?: string }>;\n  userCardComponent?: React.ComponentType<UserCardProps>;\n  onError?: (error: string) => void;\n  onUserClick?: (user: UnifiedUser) => void;\n  showAddresses?: boolean;\n  showENS?: boolean;\n};\n\nexport const calculateRelevanceScore = (\n  user: FarcasterUser,\n  query: string,\n): number => {\n  const lowerQuery = query.toLowerCase();\n  const username = user.username.toLowerCase();\n  const displayName = user.display_name.toLowerCase();\n\n  let score = 0;\n\n  // Exact matches get highest score\n  if (username === lowerQuery || username === `${lowerQuery}.eth`)\n    score += 1000;\n  else if (username.startsWith(lowerQuery)) score += 600;\n  else if (username.includes(lowerQuery)) score += 500;\n\n  // make these else ifs:\n  if (displayName === lowerQuery) score += 500;\n  else if (displayName.startsWith(lowerQuery)) score += 500;\n  else if (displayName.includes(lowerQuery)) score += 400;\n\n  // FID match\n  if (user.fid.toString() === query) score += 950;\n\n  // Bonus for shorter usernames (more relevant for short queries)\n  if (username.includes(lowerQuery)) {\n    score += Math.max(0, 100 - username.length);\n  }\n\n  if (user.verified_addresses?.eth_addresses?.length) score += 30;\n\n  // Bonus for follower count (logarithmic to avoid overwhelming)\n  score += Math.log(user.follower_count + 1) * 10;\n\n  return score;\n};\n\nexport function OnchainUserSearch({\n  apiKey,\n  alchemyApiKey,\n  onUserClick,\n  placeholder = \"Search by username, ENS, or address...\",\n  variant = \"default\",\n  className,\n  inputClassName,\n  buttonClassName,\n  layout = \"horizontal\",\n  showIcon = true,\n  autoSearch = false,\n  maxResults = 5,\n  searchFunction,\n  userCardComponent: CustomUserCard,\n  onError,\n  showAddresses = true,\n  showENS = true,\n}: OnchainUserSearchProps) {\n  const [searchInput, setSearchInput] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState<UnifiedUser[]>([]);\n  const [nextCursor, setNextCursor] = React.useState<string | undefined>();\n  const [isLoadingMore, setIsLoadingMore] = React.useState(false);\n  const debounceRef = React.useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const { sdk, isSDKLoaded, isMiniApp } = useMiniAppSdk();\n  // Create viem client for ENS resolution\n  const publicClient = React.useMemo(() => {\n    const alchemyKey = alchemyApiKey || process.env.NEXT_PUBLIC_ALCHEMY_KEY;\n    const rpcUrl = alchemyKey ? getAlchemyEndpoint(1, alchemyKey) : undefined;\n\n    return createPublicClient({\n      chain: mainnet,\n      transport: http(rpcUrl),\n    });\n  }, [alchemyApiKey]);\n\n  // Search for Farcaster users by username\n  const searchFarcasterUsers = async (\n    query: string,\n    cursor?: string,\n  ): Promise<{ users: FarcasterUser[]; nextCursor?: string }> => {\n    let url = `https://api.neynar.com/v2/farcaster/user/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    if (cursor) {\n      url += `&cursor=${encodeURIComponent(cursor)}`;\n    }\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        api_key: apiKey,\n      },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `API Error: ${response.status}`);\n    }\n\n    const data: NeynarSearchResponse = await response.json();\n\n    // Sort by relevance if multiple results (only for first page)\n    const users = !cursor\n      ? (data.result.users || [])\n          .map((user) => ({\n            user,\n            score: calculateRelevanceScore(user, query),\n          }))\n          .sort((a, b) => b.score - a.score)\n          .map((item) => item.user)\n      : data.result.users || [];\n\n    return {\n      users,\n      nextCursor: data.result.next?.cursor,\n    };\n  };\n\n  // Search for Farcaster users by address\n  const searchFarcasterByAddress = async (\n    address: string,\n  ): Promise<FarcasterUser[]> => {\n    const url = `https://api.neynar.com/v2/farcaster/user/bulk-by-address?addresses=${encodeURIComponent(address)}`;\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        api_key: apiKey,\n      },\n    });\n\n    if (!response.ok) {\n      // If 404, it means no users found for this address\n      if (response.status === 404) {\n        return [];\n      }\n      const errorData = await response.json();\n      throw new Error(errorData.message || `API Error: ${response.status}`);\n    }\n\n    const data: NeynarBulkAddressResponse = await response.json();\n\n    // The response is an object with addresses as keys\n    const users: FarcasterUser[] = [];\n    for (const [addr, userList] of Object.entries(data)) {\n      if (addressesEqual(addr, address) && Array.isArray(userList)) {\n        users.push(...userList);\n      }\n    }\n\n    return users;\n  };\n\n  // Resolve ENS name to address\n  const resolveENSToAddress = async (\n    ensName: string,\n  ): Promise<string | null> => {\n    try {\n      const address = await publicClient.getEnsAddress({\n        name: ensName,\n      });\n      return address || null;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  // Reverse resolve address to ENS name\n  const resolveAddressToENS = async (\n    address: string,\n  ): Promise<string | null> => {\n    try {\n      const ensName = await publicClient.getEnsName({\n        address: address as `0x${string}`,\n      });\n\n      // Verify the reverse resolution\n      if (ensName) {\n        const verifyAddress = await publicClient.getEnsAddress({\n          name: ensName,\n        });\n        if (!addressesEqual(verifyAddress, address)) {\n          return null;\n        }\n      }\n\n      return ensName || null;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  // Default unified search function\n  const defaultSearchFunction = async (\n    query: string,\n    apiKey: string,\n    maxResults: number,\n    cursor?: string,\n  ): Promise<{\n    users: UnifiedUser[];\n    nextCursor?: string;\n  }> => {\n    const inputType = detectInputType(query);\n    const results: UnifiedUser[] = [];\n\n    if (inputType === \"address\") {\n      // For addresses, do parallel lookups\n      const normalizedAddr = normalizeAddress(query);\n      if (!normalizedAddr) {\n        throw new Error(\"Invalid Ethereum address\");\n      }\n\n      // Parallel lookups for address\n      const [ensName, farcasterUsers] = await Promise.all([\n        showENS ? resolveAddressToENS(normalizedAddr) : Promise.resolve(null),\n        searchFarcasterByAddress(normalizedAddr),\n      ]);\n\n      if (farcasterUsers.length > 0) {\n        // Group by primary address if multiple Farcaster accounts\n        for (const fcUser of farcasterUsers) {\n          const addresses = fcUser.verified_addresses?.eth_addresses || [];\n          results.push({\n            primaryAddress: normalizedAddr,\n            ensName: ensName || undefined,\n            farcaster: fcUser,\n            addresses: addresses\n              .filter((addr) => !addressesEqual(addr, normalizedAddr))\n              .concat(normalizedAddr),\n            source: \"address\",\n          });\n        }\n      } else {\n        // No Farcaster account, just show address info\n        results.push({\n          primaryAddress: normalizedAddr,\n          ensName: ensName || undefined,\n          addresses: [normalizedAddr],\n          source: \"address\",\n        });\n      }\n    } else if (inputType === \"ens\") {\n      // For ENS names, resolve to address first\n      const address = await resolveENSToAddress(query);\n      if (!address) {\n        throw new Error(\"ENS name could not be resolved\");\n      }\n\n      // Then search for Farcaster accounts\n      const farcasterUsers = await searchFarcasterByAddress(address);\n\n      if (farcasterUsers.length > 0) {\n        for (const fcUser of farcasterUsers) {\n          const addresses = fcUser.verified_addresses?.eth_addresses || [];\n          results.push({\n            primaryAddress: address,\n            ensName: query,\n            farcaster: fcUser,\n            addresses: addresses\n              .filter((addr) => !addressesEqual(addr, address))\n              .concat(address),\n            source: \"ens\",\n          });\n        }\n      } else {\n        // No Farcaster account\n        results.push({\n          primaryAddress: address,\n          ensName: query,\n          addresses: [address],\n          source: \"ens\",\n        });\n      }\n    } else {\n      // Username search\n      const { users: farcasterUsers, nextCursor } = await searchFarcasterUsers(\n        query,\n        cursor,\n      );\n\n      // Convert to unified format\n      for (const fcUser of farcasterUsers) {\n        const primaryAddr = fcUser.verified_addresses?.eth_addresses?.[0];\n        if (!primaryAddr) {\n          // Skip users without verified addresses\n          continue;\n        }\n\n        // Look up ENS for primary address if enabled\n        const ensName = showENS ? await resolveAddressToENS(primaryAddr) : null;\n\n        results.push({\n          primaryAddress: primaryAddr,\n          ensName: ensName || undefined,\n          farcaster: fcUser,\n          addresses: fcUser.verified_addresses?.eth_addresses || [],\n          source: \"farcaster\",\n        });\n      }\n\n      return {\n        users: results,\n        nextCursor,\n      };\n    }\n\n    return {\n      users: results,\n      nextCursor: undefined,\n    };\n  };\n\n  const searchUsers = async (query: string, loadMore = false) => {\n    if (!searchFunction && !apiKey.trim()) {\n      const errorMsg = \"API key is required\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n      return;\n    }\n\n    if (!query.trim()) {\n      const errorMsg = \"Please enter a search term\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n      return;\n    }\n\n    try {\n      if (loadMore) {\n        setIsLoadingMore(true);\n      } else {\n        setLoading(true);\n        setSearchResults([]);\n        setNextCursor(undefined);\n      }\n      setError(\"\");\n\n      const searchFn = searchFunction || defaultSearchFunction;\n      const cursor = loadMore ? nextCursor : undefined;\n\n      const { users, nextCursor: newCursor } = await searchFn(\n        query,\n        apiKey,\n        maxResults,\n        cursor,\n      );\n\n      if (loadMore) {\n        setSearchResults((prev) => [...prev, ...users]);\n      } else {\n        setSearchResults(users);\n      }\n\n      setNextCursor(newCursor);\n\n      if (!loadMore && users.length === 0) {\n        const errorMsg = \"No users found matching your search\";\n        setError(errorMsg);\n        onError?.(errorMsg);\n      }\n    } catch (err) {\n      const errorMsg =\n        err instanceof Error ? err.message : \"Failed to search users\";\n      setError(errorMsg);\n      if (!loadMore) {\n        setSearchResults([]);\n        setNextCursor(undefined);\n      }\n      onError?.(errorMsg);\n    } finally {\n      setLoading(false);\n      setIsLoadingMore(false);\n    }\n  };\n\n  const viewProfile = async (user: UnifiedUser) => {\n    try {\n      if (user.farcaster && isMiniApp) {\n        await sdk.actions.viewProfile({ fid: user.farcaster.fid });\n      } else if (user.farcaster) {\n        window.open(\n          `https://farcaster.xyz/${user.farcaster.username}`,\n          \"_blank\",\n        );\n      } else if (user.ensName) {\n        window.open(`https://app.ens.domains/${user.ensName}`, \"_blank\");\n      } else {\n        window.open(\n          `https://etherscan.io/address/${user.primaryAddress}`,\n          \"_blank\",\n        );\n      }\n    } catch (err) {\n      const errorMsg =\n        err instanceof Error ? err.message : \"Failed to view profile\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n    }\n  };\n\n  const handleSearch = async () => {\n    await searchUsers(searchInput);\n  };\n\n  const handleClear = () => {\n    setSearchInput(\"\");\n    setSearchResults([]);\n    setNextCursor(undefined);\n    setError(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n\n    setSearchInput(value);\n    setError(\"\");\n\n    // Clear previous timeout\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n\n    if (value === \"\") {\n      setSearchResults([]);\n      setNextCursor(undefined);\n      return;\n    }\n\n    // Auto-search with debounce\n    if (autoSearch && value.length > 2) {\n      debounceRef.current = setTimeout(() => {\n        searchUsers(value);\n      }, 500);\n    }\n  };\n\n  const containerClasses = cn(\"flex flex-col gap-4 w-full\", className);\n\n  const searchContainerClasses = cn(\n    \"flex gap-2 w-full\",\n    layout === \"vertical\" ? \"flex-col\" : \"flex-row\",\n  );\n\n  const hasMoreResults = !!nextCursor;\n\n  return (\n    <div className={containerClasses}>\n      {/* Search Input */}\n      <div className={searchContainerClasses}>\n        <div className=\"flex-1 flex gap-2\">\n          <Input\n            type=\"text\"\n            placeholder={placeholder}\n            value={searchInput}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyPress}\n            className={cn(\"w-full\", error && \"border-red-500\", inputClassName)}\n          />\n          {searchInput && (\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={handleClear}\n              disabled={loading}\n              className=\"shrink-0\"\n              title=\"Clear search\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Clear Button - only show when there's a search term */}\n        <Button\n          variant={variant}\n          onClick={handleSearch}\n          disabled={loading || !searchInput.trim() || !isSDKLoaded}\n          className={cn(\n            layout === \"vertical\" ? \"w-full\" : \"shrink-0\",\n            buttonClassName,\n          )}\n        >\n          {loading ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n              Searching...\n            </>\n          ) : (\n            <>\n              {showIcon && <Search className=\"h-4 w-4 mr-2\" />}\n              Search\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"text-sm text-red-500 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-md p-3\">\n          {error}\n        </div>\n      )}\n\n      {/* Search Results */}\n      {searchResults.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Users className=\"h-4 w-4\" />\n              Showing {searchResults.length} user\n              {searchResults.length !== 1 ? \"s\" : \"\"}\n            </div>\n          </div>\n\n          <div className=\"grid gap-3\">\n            {searchResults.map((user) => {\n              const UserCardComponent = CustomUserCard || UserCard;\n              return (\n                <UserCardComponent\n                  key={user.primaryAddress + (user.farcaster?.fid || \"\")}\n                  user={user}\n                  onClick={() => {\n                    if (onUserClick) {\n                      onUserClick(user);\n                    } else {\n                      viewProfile(user);\n                    }\n                  }}\n                  showAddresses={showAddresses}\n                  showENS={showENS}\n                />\n              );\n            })}\n          </div>\n\n          {hasMoreResults && (\n            <div className=\"flex justify-center pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => searchUsers(searchInput, true)}\n                disabled={isLoadingMore || loading}\n                className=\"w-full sm:w-auto\"\n              >\n                {isLoadingMore ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n                    Loading more...\n                  </>\n                ) : (\n                  <>Load More</>\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// User Card Component\ntype UserCardProps = {\n  user: UnifiedUser;\n  onClick: () => void;\n  showAddresses?: boolean;\n  showENS?: boolean;\n};\n\nfunction UserCard({\n  user,\n  onClick,\n  showAddresses = true,\n  showENS = true,\n}: UserCardProps) {\n  const hasFarcaster = !!user.farcaster;\n  const displayName =\n    user.farcaster?.display_name ||\n    user.ensName ||\n    formatAddress(user.primaryAddress);\n  const username = user.farcaster?.username;\n  const pfpUrl = user.farcaster?.pfp_url;\n\n  return (\n    <div\n      onClick={onClick}\n      className=\"p-2 sm:p-3 border border-border rounded-lg hover:bg-accent/50 cursor-pointer transition-colors group\"\n    >\n      {/* Top row with avatar, name, and identifiers */}\n      <div className=\"flex gap-2 sm:gap-3\">\n        {/* Avatar */}\n        <div className=\"relative flex-shrink-0 mt-[3px]\">\n          {pfpUrl ? (\n            <img\n              src={pfpUrl}\n              alt={displayName}\n              className=\"w-10 h-10 rounded-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center\">\n              {hasFarcaster ? (\n                <User className=\"h-5 w-5 text-muted-foreground\" />\n              ) : (\n                <Wallet className=\"h-5 w-5 text-muted-foreground\" />\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Name and identifiers */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center flex-wrap gap-2\">\n            <h3 className=\"font-medium text-xs sm:text-sm truncate flex-1\">\n              {displayName}\n            </h3>\n            {user.farcaster && (\n              <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                FID {user.farcaster.fid}\n              </span>\n            )}\n          </div>\n\n          {/* Username or ENS */}\n          {username && (\n            <p className=\"text-xs sm:text-sm text-muted-foreground truncate flex items-center gap-1\">\n              @{username}\n            </p>\n          )}\n\n          {/* ENS name if different from display */}\n          {showENS && user.ensName && user.ensName !== displayName && (\n            <p className=\"text-xs text-muted-foreground truncate\">\n              {user.ensName}\n            </p>\n          )}\n\n          {/* Primary address */}\n          {showAddresses && (\n            <p className=\"text-xs text-muted-foreground truncate flex items-center gap-1\">\n              <Wallet className=\"h-3 w-3\" />\n              {formatAddress(user.primaryAddress)}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Bio */}\n      {user.farcaster?.profile?.bio?.text && (\n        <p className=\"text-xs text-muted-foreground mt-2 line-clamp-2 leading-tight ml-12 sm:ml-15\">\n          {user.farcaster.profile.bio.text}\n        </p>\n      )}\n\n      {/* Stats or additional addresses */}\n      <div className=\"flex flex-wrap items-center gap-3 mt-2 text-xs text-muted-foreground ml-12 sm:ml-15\">\n        {user.farcaster ? (\n          <>\n            <span className=\"whitespace-nowrap\">\n              {formatLargeNumber(user.farcaster.follower_count)} followers\n            </span>\n            <span className=\"whitespace-nowrap\">\n              {formatLargeNumber(user.farcaster.following_count)} following\n            </span>\n          </>\n        ) : (\n          <>\n            {user.addresses.length > 1 && showAddresses && (\n              <span className=\"text-xs\">\n                +{user.addresses.length - 1} more address\n                {user.addresses.length > 2 ? \"es\" : \"\"}\n              </span>\n            )}\n            {user.source === \"ens\" && (\n              <span className=\"inline-flex items-center gap-1 px-2 py-0.5 bg-primary/10 text-primary rounded-full text-xs\">\n                ENS\n              </span>\n            )}\n            {user.source === \"address\" && (\n              <span className=\"inline-flex items-center gap-1 px-2 py-0.5 bg-muted text-muted-foreground rounded-full text-xs\">\n                Address\n              </span>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/registry/mini-app/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/input.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/registry/mini-app/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/miniapp-sdk\";\nimport { Context } from \"@farcaster/miniapp-core\";\n\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.MiniAppContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isMiniApp, setIsMiniApp] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"miniAppAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `miniAppAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"miniAppAddRejected\", ({ reason }) => {\n      setLastEvent(`miniAppAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"miniAppRemoved\", () => {\n      setLastEvent(\"miniAppRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n\n      const miniAppStatus = await sdk.isInMiniApp();\n      setIsMiniApp(miniAppStatus);\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addMiniApp();\n      console.log(\"addMiniApp result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isMiniApp,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry/mini-app/lib/text-utils.ts",
      "content": "export const formatLargeNumber = (num?: number): string => {\n  if (!num) return \"0\";\n\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + \"M\";\n  } else if (num >= 2000) {\n    return (num / 1000).toFixed(1) + \"K\";\n  } else {\n    return num.toString();\n  }\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/mini-app/lib/address-utils.ts",
      "content": "import { isAddress, getAddress } from \"viem\";\n\n/**\n * Formats an Ethereum address to show first and last few characters\n * @param address - The address to format\n * @param chars - Number of characters to show at start and end (default: 4)\n * @returns Formatted address like \"0x1234...5678\"\n */\nexport function formatAddress(address: string, chars = 4): string {\n  if (!address || address.length < chars * 2 + 2) return address;\n  return `${address.slice(0, chars + 2)}...${address.slice(-chars)}`;\n}\n\n/**\n * Detects the type of input (address, ENS name, or username)\n * @param input - The search input\n * @returns The detected input type\n */\nexport type InputType = \"address\" | \"ens\" | \"username\";\n\nexport function detectInputType(input: string): InputType {\n  if (!input || input.trim().length === 0) return \"username\";\n  \n  const trimmed = input.trim();\n  \n  // Check if it's a valid Ethereum address\n  if (isAddress(trimmed)) {\n    return \"address\";\n  }\n  \n  // Check if it's an ENS name (contains . and not already an address)\n  if (trimmed.includes(\".\") && trimmed.length > 3) {\n    // Common ENS TLDs\n    const ensPattern = /\\.(eth|xyz|luxe|kred|art|club|test)$/i;\n    if (ensPattern.test(trimmed)) {\n      return \"ens\";\n    }\n  }\n  \n  // Default to username (Farcaster username or FID)\n  return \"username\";\n}\n\n/**\n * Validates and normalizes an Ethereum address\n * @param address - The address to validate\n * @returns The checksummed address or null if invalid\n */\nexport function normalizeAddress(address: string): string | null {\n  try {\n    if (!isAddress(address)) return null;\n    return getAddress(address);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Checks if two addresses are equal (case-insensitive)\n * @param addr1 - First address\n * @param addr2 - Second address\n * @returns True if addresses are equal\n */\nexport function addressesEqual(addr1: string | null | undefined, addr2: string | null | undefined): boolean {\n  if (!addr1 || !addr2) return false;\n  try {\n    return getAddress(addr1).toLowerCase() === getAddress(addr2).toLowerCase();\n  } catch {\n    return false;\n  }\n}",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/mini-app/lib/chains.ts",
      "content": "import { http, type Chain, type PublicClient, createPublicClient } from \"viem\";\nimport * as chains from \"viem/chains\";\n\n/**\n * Supported chains configuration with Alchemy RPC support\n */\nexport const SUPPORTED_CHAINS = [\n  { id: 1, chain: chains.mainnet, alchemyPrefix: \"eth-mainnet\" },\n  { id: 8453, chain: chains.base, alchemyPrefix: \"base-mainnet\" },\n  { id: 42161, chain: chains.arbitrum, alchemyPrefix: \"arb-mainnet\" },\n  { id: 421614, chain: chains.arbitrumSepolia, alchemyPrefix: \"arb-sepolia\" },\n  { id: 84532, chain: chains.baseSepolia, alchemyPrefix: \"base-sepolia\" },\n  { id: 666666666, chain: chains.degen, alchemyPrefix: \"degen-mainnet\" },\n  { id: 100, chain: chains.gnosis, alchemyPrefix: \"gnosis-mainnet\" },\n  { id: 10, chain: chains.optimism, alchemyPrefix: \"opt-mainnet\" },\n  { id: 11155420, chain: chains.optimismSepolia, alchemyPrefix: \"opt-sepolia\" },\n  { id: 137, chain: chains.polygon, alchemyPrefix: \"polygon-mainnet\" },\n  { id: 11155111, chain: chains.sepolia, alchemyPrefix: \"eth-sepolia\" },\n  { id: 7777777, chain: chains.zora, alchemyPrefix: \"zora-mainnet\" },\n  { id: 130, chain: chains.ham, alchemyPrefix: \"unichain-mainnet\" }, // Unichain\n  {\n    id: 10143,\n    chain: {\n      id: 10143,\n      name: \"Monad Testnet\",\n      network: \"monad-testnet\",\n      nativeCurrency: { name: \"Monad\", symbol: \"MON\", decimals: 18 },\n      rpcUrls: {\n        default: { http: [\"https://testnet.monad.xyz\"] },\n        public: { http: [\"https://testnet.monad.xyz\"] },\n      },\n    } as const,\n    alchemyPrefix: null,\n  },\n  { id: 42220, chain: chains.celo, alchemyPrefix: null },\n] as const;\n\n/**\n * Get viem Chain object by ID\n */\nexport function getChainById(chainId: number): Chain {\n  const config = SUPPORTED_CHAINS.find((c) => c.id === chainId);\n  return config?.chain || chains.mainnet;\n}\n\n/**\n * Get HTTP transport with optional Alchemy RPC URL\n * Falls back to public RPC if no Alchemy key is available\n */\nexport function getTransport(chainId: number) {\n  const alchemyKey = process.env.NEXT_PUBLIC_ALCHEMY_KEY;\n  const config = SUPPORTED_CHAINS.find((c) => c.id === chainId);\n\n  if (config?.alchemyPrefix && alchemyKey) {\n    return http(\n      `https://${config.alchemyPrefix}.g.alchemy.com/v2/${alchemyKey}`,\n    );\n  }\n\n  // Fallback to default public RPC\n  return http();\n}\n\n/**\n * Create a public client for a specific chain with optimal transport\n */\nexport function getPublicClient(chainId: number): PublicClient {\n  return createPublicClient({\n    chain: getChainById(chainId),\n    transport: getTransport(chainId),\n  }) as PublicClient;\n}\n\n/**\n * Find chain by network name (case-insensitive)\n */\nexport function findChainByName(networkName: string): Chain | undefined {\n  const normalizedName = networkName.toLowerCase().trim();\n  \n  // Direct name mappings\n  const nameToId: Record<string, number> = {\n    ethereum: 1,\n    mainnet: 1,\n    base: 8453,\n    arbitrum: 42161,\n    \"arbitrum one\": 42161,\n    \"arbitrum sepolia\": 421614,\n    \"base sepolia\": 84532,\n    degen: 666666666,\n    gnosis: 100,\n    optimism: 10,\n    \"optimism sepolia\": 11155420,\n    polygon: 137,\n    sepolia: 11155111,\n    \"ethereum sepolia\": 11155111,\n    zora: 7777777,\n    unichain: 130,\n    ham: 130,\n    \"monad testnet\": 10143,\n    monad: 10143,\n    celo: 42220,\n  };\n  \n  const chainId = nameToId[normalizedName];\n  return chainId ? getChainById(chainId) : undefined;\n}\n\n/**\n * Get Alchemy RPC endpoint URL for a specific chain\n */\nexport function getAlchemyEndpoint(chainId: number, apiKey: string): string | undefined {\n  const config = SUPPORTED_CHAINS.find((c) => c.id === chainId);\n  \n  if (config?.alchemyPrefix && apiKey) {\n    return `https://${config.alchemyPrefix}.g.alchemy.com/v2/${apiKey}`;\n  }\n  \n  return undefined;\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ],
  "meta": {
    "use_cases": [
      "User Search",
      "Profile Lookup",
      "Address Resolution",
      "ENS Resolution",
      "Team Member Search"
    ],
    "keywords": [
      "search",
      "profiles",
      "neynar",
      "farcaster",
      "ens",
      "address",
      "ethereum",
      "onchain"
    ]
  }
}