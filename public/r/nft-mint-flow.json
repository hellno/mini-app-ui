{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nft-mint-flow",
  "type": "registry:block",
  "description": "A complete NFT minting flow component with wallet connection, transaction handling, and 5-step user experience",
  "dependencies": [
    "lucide-react",
    "wagmi",
    "viem",
    "@farcaster/frame-wagmi-connector",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core",
    "wagmi",
    "viem",
    "@farcaster/frame-wagmi-connector"
  ],
  "devDependencies": [],
  "registryDependencies": [
    "button",
    "sheet"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/nft-mint-flow/nft-mint-flow.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/registry/mini-app/ui/sheet\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { useAccount, useConnect, useWaitForTransactionReceipt, useWriteContract, useReadContract } from \"wagmi\";\nimport { formatEther, type Address } from \"viem\";\nimport { farcasterFrame } from \"@farcaster/frame-wagmi-connector\";\nimport { Coins, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype NFTMintFlowProps = {\n  amount: number;\n  chainId: number;\n  contractAddress: Address;\n  className?: string;\n  variant?: \"default\" | \"destructive\" | \"secondary\" | \"ghost\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  buttonText?: string;\n  disabled?: boolean;\n  onMintSuccess?: (txHash: string) => void;\n  onMintError?: (error: string) => void;\n};\n\ntype MintStep = \"initial\" | \"sheet\" | \"connecting\" | \"minting\" | \"waiting\" | \"success\" | \"error\";\n\n// Common NFT contract ABI for price reading\nconst priceAbi = [\n  {\n    inputs: [],\n    name: \"mintPrice\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"price\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINT_PRICE\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMintPrice\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport function NFTMintFlow({\n  amount,\n  chainId,\n  contractAddress,\n  className,\n  variant = \"default\",\n  size = \"default\",\n  buttonText = \"Mint NFT\",\n  disabled = false,\n  onMintSuccess,\n  onMintError,\n}: NFTMintFlowProps) {\n  const [step, setStep] = React.useState<MintStep>(\"initial\");\n  const [error, setError] = React.useState<string>(\"\");\n  const [txHash, setTxHash] = React.useState<string>(\"\");\n  const [isSheetOpen, setIsSheetOpen] = React.useState(false);\n  const { isSDKLoaded } = useMiniAppSdk();\n  const { isConnected } = useAccount();\n  const { connect } = useConnect();\n  const { writeContract, isPending: isWritePending, data: writeData, error: writeError } = useWriteContract();\n  \n  // Read mint price from contract with proper configuration\n  const {data: mintPrice, isError: isPriceError, isLoading:isMintPriceLoading } = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"mintPrice\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId ,\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  // Fallback to other price function names if mintPrice fails\n  const { data: price, isLoading: isPriceLoading ,isError: isPriceError2} = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"price\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isPriceError && (isPriceError || mintPrice === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const { data: MINT_PRICE, isLoading: isMintPriceConstLoading,isError: isMintPriceConstError } =  useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"MINT_PRICE\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isPriceError2 && (isPriceError2 || price === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const { data: getMintPrice, isLoading: isGetMintPriceLoading } = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"getMintPrice\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isMintPriceConstError && (isMintPriceConstError || MINT_PRICE === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const contractPrice = mintPrice === BigInt(0) ? BigInt(0) : mintPrice ? mintPrice : price === BigInt(0) ? BigInt(0) : price ? price : MINT_PRICE === BigInt(0) ? BigInt(0) : MINT_PRICE ? MINT_PRICE : getMintPrice === BigInt(0) ? BigInt(0) : getMintPrice ? getMintPrice : undefined;\n  const isLoadingPrice = isMintPriceLoading || isPriceLoading || isMintPriceConstLoading || isGetMintPriceLoading;\n\n  const { isSuccess: isTxSuccess, isError: isTxError, error: txError } = useWaitForTransactionReceipt({\n    hash: writeData,\n  });\n\n  // Calculate total cost\n  const totalCost = contractPrice ? (Number(formatEther(contractPrice)) * amount).toString() : \"0\";\n\n  // Reset error when step changes\n  React.useEffect(() => {\n    if (step !== \"error\") {\n      setError(\"\");\n    }\n  }, [step]);\n\n  // Handle transaction success\n  React.useEffect(() => {\n    if (writeError) {\n      if(writeError.message.toLowerCase().includes(\"user rejected the request\")) {\n        handleClose();\n        return;\n      }\n      setStep(\"error\");\n      setError(writeError.message);\n      onMintError?.(writeError.message);\n    }\n    if (isTxError && txError) {\n      setStep(\"error\");\n      setError(txError.message);\n      onMintError?.(txError.message);\n    }\n    if (isTxSuccess && writeData) {\n      setStep(\"success\");\n      setTxHash(writeData);\n      onMintSuccess?.(writeData);\n    }\n  }, [isTxSuccess, writeData, onMintSuccess, isTxError, txError, onMintError, writeError]);\n\n  // Handle writeContract data update\n  React.useEffect(() => {\n    if (writeData && step === \"waiting\") {\n      setTxHash(writeData);\n    }\n  }, [writeData, step]);\n\n  const handleInitialMint = () => {\n    if (!isSDKLoaded) {\n      setError(\"Farcaster SDK not loaded\");\n      setStep(\"error\");\n      setIsSheetOpen(true);\n      return;\n    }\n    setStep(\"sheet\");\n    setIsSheetOpen(true);\n  };\n\n  const handleConnectWallet = async () => {\n    try {\n      setStep(\"connecting\");\n      const connector = farcasterFrame();\n      connect({ connector });\n      // Connection handled by wagmi hooks\n    } catch (err) {\n      console.error(\"Failed to connect wallet:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Failed to connect wallet\";\n      \n      // For other errors, show error state\n      setError(errorMessage);\n      setStep(\"error\");\n    }\n  };\n\n  const handleMint = async () => {\n    if (!isConnected) {\n      await handleConnectWallet();\n      return;\n    }\n\n    if (contractPrice === undefined) {\n      setError(\"Could not fetch mint price from contract\");\n      setStep(\"error\");\n      return;\n    }\n\n    try {\n      setStep(\"minting\");\n      \n      // Simple mint function call - adjust ABI based on your NFT contract\n      writeContract({\n        address: contractAddress,\n        abi: [\n          {\n            name: \"mint\",\n            type: \"function\",\n            inputs: [{ name: \"amount\", type: \"uint256\" }],\n            outputs: [],\n            stateMutability: \"payable\",\n          },\n        ] as const,\n        functionName: \"mint\",\n        args: [BigInt(amount)],\n        value: contractPrice * BigInt(amount),\n        chainId,\n      });\n\n      // Transaction initiated, will be handled by wagmi hooks\n      setStep(\"waiting\");\n    } catch (err) {\n      console.error(\"Mint failed:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Mint transaction failed\";\n      \n      // Check if user rejected\n      if (err instanceof Error && err.name === \"UserRejectedRequestError\") {\n        handleClose(); // Close the sheet on user rejection\n        return;\n      }\n      \n      // For other errors, show error state\n      setError(errorMessage);\n      setStep(\"error\");\n      onMintError?.(errorMessage);\n    }\n  };\n\n  const handleClose = () => {\n    setIsSheetOpen(false);\n    setStep(\"initial\");\n    setError(\"\");\n    setTxHash(\"\");\n  };\n\n  const handleRetry = () => {\n    setError(\"\");\n    setStep(\"sheet\");\n  };\n\n  return (\n    <Sheet open={isSheetOpen} onOpenChange={(open) => {\n      setIsSheetOpen(open);\n      if (!open) {\n        handleClose();\n      }\n    }}>\n      <Button\n        variant={variant}\n        size={size}\n        onClick={handleInitialMint}\n        disabled={disabled || !isSDKLoaded}\n        className={cn(\"w-full\", className)}\n      >\n        <Coins className=\"h-4 w-4 mr-2\" />\n        {buttonText}\n      </Button>\n\n      <SheetContent side=\"bottom\" onClose={handleClose}>\n        <SheetHeader className=\"mb-6\">\n          <SheetTitle>\n            {step === \"sheet\" && \"Mint NFT\"}\n            {step === \"connecting\" && \"Connecting Wallet\"}\n            {step === \"minting\" && \"Preparing Mint\"}\n            {step === \"waiting\" && \"Minting...\"}\n            {step === \"success\" && \"Mint Successful!\"}\n            {step === \"error\" && \"Mint Failed\"}\n          </SheetTitle>\n        </SheetHeader>\n\n        {/* Step 2: Sheet Content */}\n        {step === \"sheet\" && (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Contract</span>\n                <span className=\"font-mono text-sm\">\n                  {contractAddress.slice(0, 6)}...{contractAddress.slice(-4)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Quantity</span>\n                <span className=\"font-semibold\">{amount}</span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Price per NFT</span>\n                <span className=\"font-semibold\">\n                  {isLoadingPrice ? (\n                    \"Loading...\"\n                  ) : contractPrice === BigInt(0) ? (\n                    \"0 ETH\"\n                  ) : contractPrice ? (\n                    `${Number(formatEther(contractPrice)).toFixed(4)} ETH`\n                  ) : (\n                    \"Error loading price\"\n                  )}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 text-lg font-semibold\">\n                <span>Total Cost</span>\n                <span>{totalCost} ETH</span>\n              </div>\n            </div>\n            \n            <Button\n              onClick={isConnected ? handleMint : handleConnectWallet}\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={isWritePending}\n            >\n              {isConnected ? (\n                <>\n                  <Coins className=\"h-5 w-5 mr-2\" />\n                  Mint {amount} NFT{amount > 1 ? 's' : ''}\n                </>\n              ) : (\n                \"Connect Wallet to Mint\"\n              )}\n            </Button>\n          </div>\n        )}\n\n        {/* Step 3: Connecting */}\n        {step === \"connecting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <p className=\"text-muted-foreground\">\n              Connecting to your Farcaster wallet...\n            </p>\n          </div>\n        )}\n\n        {/* Step 3/4: Minting */}\n        {step === \"minting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Preparing mint transaction</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Please approve the transaction in your wallet\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Waiting for Transaction */}\n        {step === \"waiting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Transaction submitted</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Waiting for confirmation on the blockchain...\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Step 5: Success */}\n        {step === \"success\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <CheckCircle className=\"h-12 w-12 text-green-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-600\">Mint successful!</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Your {amount} NFT{amount > 1 ? 's have' : ' has'} been minted successfully\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n            <Button onClick={handleClose} className=\"w-full\">\n              Close\n            </Button>\n          </div>\n        )}\n\n        {/* Error State */}\n        {step === \"error\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-red-600\">Mint failed</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {error || \"An unexpected error occurred\"}\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={handleClose} className=\"flex-1\">\n                Close\n              </Button>\n              <Button onClick={handleRetry} className=\"flex-1\">\n                Try Again\n              </Button>\n            </div>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n} ",
      "type": "registry:block"
    },
    {
      "path": "registry\\mini-app\\blocks\\nft-mint-flow\\nft-mint-flow.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/registry/mini-app/ui/sheet\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { useAccount, useConnect, useWaitForTransactionReceipt, useWriteContract, useReadContract } from \"wagmi\";\nimport { formatEther, type Address } from \"viem\";\nimport { farcasterFrame } from \"@farcaster/frame-wagmi-connector\";\nimport { Coins, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype NFTMintFlowProps = {\n  amount: number;\n  chainId: number;\n  contractAddress: Address;\n  className?: string;\n  variant?: \"default\" | \"destructive\" | \"secondary\" | \"ghost\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  buttonText?: string;\n  disabled?: boolean;\n  onMintSuccess?: (txHash: string) => void;\n  onMintError?: (error: string) => void;\n};\n\ntype MintStep = \"initial\" | \"sheet\" | \"connecting\" | \"minting\" | \"waiting\" | \"success\" | \"error\";\n\n// Common NFT contract ABI for price reading\nconst priceAbi = [\n  {\n    inputs: [],\n    name: \"mintPrice\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"price\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINT_PRICE\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMintPrice\",\n    outputs: [{ type: \"uint256\", name: \"price\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport function NFTMintFlow({\n  amount,\n  chainId,\n  contractAddress,\n  className,\n  variant = \"default\",\n  size = \"default\",\n  buttonText = \"Mint NFT\",\n  disabled = false,\n  onMintSuccess,\n  onMintError,\n}: NFTMintFlowProps) {\n  const [step, setStep] = React.useState<MintStep>(\"initial\");\n  const [error, setError] = React.useState<string>(\"\");\n  const [txHash, setTxHash] = React.useState<string>(\"\");\n  const [isSheetOpen, setIsSheetOpen] = React.useState(false);\n  const { isSDKLoaded } = useMiniAppSdk();\n  const { isConnected } = useAccount();\n  const { connect } = useConnect();\n  const { writeContract, isPending: isWritePending, data: writeData, error: writeError } = useWriteContract();\n  \n  // Read mint price from contract with proper configuration\n  const {data: mintPrice, isError: isPriceError, isLoading:isMintPriceLoading } = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"mintPrice\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId ,\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  // Fallback to other price function names if mintPrice fails\n  const { data: price, isLoading: isPriceLoading ,isError: isPriceError2} = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"price\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isPriceError && (isPriceError || mintPrice === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const { data: MINT_PRICE, isLoading: isMintPriceConstLoading,isError: isMintPriceConstError } =  useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"MINT_PRICE\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isPriceError2 && (isPriceError2 || price === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const { data: getMintPrice, isLoading: isGetMintPriceLoading } = useReadContract({\n    address: contractAddress,\n    abi: priceAbi,\n    functionName: \"getMintPrice\",\n    chainId,\n    query: {\n      enabled: !!contractAddress && !!chainId && isMintPriceConstError && (isMintPriceConstError || MINT_PRICE === undefined),\n      retry: 3,\n      retryDelay: 1000,\n    },\n  });\n\n  const contractPrice = mintPrice === BigInt(0) ? BigInt(0) : mintPrice ? mintPrice : price === BigInt(0) ? BigInt(0) : price ? price : MINT_PRICE === BigInt(0) ? BigInt(0) : MINT_PRICE ? MINT_PRICE : getMintPrice === BigInt(0) ? BigInt(0) : getMintPrice ? getMintPrice : undefined;\n  const isLoadingPrice = isMintPriceLoading || isPriceLoading || isMintPriceConstLoading || isGetMintPriceLoading;\n\n  const { isSuccess: isTxSuccess, isError: isTxError, error: txError } = useWaitForTransactionReceipt({\n    hash: writeData,\n  });\n\n  // Calculate total cost\n  const totalCost = contractPrice ? (Number(formatEther(contractPrice)) * amount).toString() : \"0\";\n\n  // Reset error when step changes\n  React.useEffect(() => {\n    if (step !== \"error\") {\n      setError(\"\");\n    }\n  }, [step]);\n\n  // Handle transaction success\n  React.useEffect(() => {\n    if (writeError) {\n      if(writeError.message.toLowerCase().includes(\"user rejected the request\")) {\n        handleClose();\n        return;\n      }\n      setStep(\"error\");\n      setError(writeError.message);\n      onMintError?.(writeError.message);\n    }\n    if (isTxError && txError) {\n      setStep(\"error\");\n      setError(txError.message);\n      onMintError?.(txError.message);\n    }\n    if (isTxSuccess && writeData) {\n      setStep(\"success\");\n      setTxHash(writeData);\n      onMintSuccess?.(writeData);\n    }\n  }, [isTxSuccess, writeData, onMintSuccess, isTxError, txError, onMintError, writeError]);\n\n  // Handle writeContract data update\n  React.useEffect(() => {\n    if (writeData && step === \"waiting\") {\n      setTxHash(writeData);\n    }\n  }, [writeData, step]);\n\n  const handleInitialMint = () => {\n    if (!isSDKLoaded) {\n      setError(\"Farcaster SDK not loaded\");\n      setStep(\"error\");\n      setIsSheetOpen(true);\n      return;\n    }\n    setStep(\"sheet\");\n    setIsSheetOpen(true);\n  };\n\n  const handleConnectWallet = async () => {\n    try {\n      setStep(\"connecting\");\n      const connector = farcasterFrame();\n      connect({ connector });\n      // Connection handled by wagmi hooks\n    } catch (err) {\n      console.error(\"Failed to connect wallet:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Failed to connect wallet\";\n      \n      // For other errors, show error state\n      setError(errorMessage);\n      setStep(\"error\");\n    }\n  };\n\n  const handleMint = async () => {\n    if (!isConnected) {\n      await handleConnectWallet();\n      return;\n    }\n\n    if (contractPrice === undefined) {\n      setError(\"Could not fetch mint price from contract\");\n      setStep(\"error\");\n      return;\n    }\n\n    try {\n      setStep(\"minting\");\n      \n      // Simple mint function call - adjust ABI based on your NFT contract\n      writeContract({\n        address: contractAddress,\n        abi: [\n          {\n            name: \"mint\",\n            type: \"function\",\n            inputs: [{ name: \"amount\", type: \"uint256\" }],\n            outputs: [],\n            stateMutability: \"payable\",\n          },\n        ] as const,\n        functionName: \"mint\",\n        args: [BigInt(amount)],\n        value: contractPrice * BigInt(amount),\n        chainId,\n      });\n\n      // Transaction initiated, will be handled by wagmi hooks\n      setStep(\"waiting\");\n    } catch (err) {\n      console.error(\"Mint failed:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Mint transaction failed\";\n      \n      // Check if user rejected\n      if (err instanceof Error && err.name === \"UserRejectedRequestError\") {\n        handleClose(); // Close the sheet on user rejection\n        return;\n      }\n      \n      // For other errors, show error state\n      setError(errorMessage);\n      setStep(\"error\");\n      onMintError?.(errorMessage);\n    }\n  };\n\n  const handleClose = () => {\n    setIsSheetOpen(false);\n    setStep(\"initial\");\n    setError(\"\");\n    setTxHash(\"\");\n  };\n\n  const handleRetry = () => {\n    setError(\"\");\n    setStep(\"sheet\");\n  };\n\n  return (\n    <Sheet open={isSheetOpen} onOpenChange={(open) => {\n      setIsSheetOpen(open);\n      if (!open) {\n        handleClose();\n      }\n    }}>\n      <Button\n        variant={variant}\n        size={size}\n        onClick={handleInitialMint}\n        disabled={disabled || !isSDKLoaded}\n        className={cn(\"w-full\", className)}\n      >\n        <Coins className=\"h-4 w-4 mr-2\" />\n        {buttonText}\n      </Button>\n\n      <SheetContent side=\"bottom\" onClose={handleClose}>\n        <SheetHeader className=\"mb-6\">\n          <SheetTitle>\n            {step === \"sheet\" && \"Mint NFT\"}\n            {step === \"connecting\" && \"Connecting Wallet\"}\n            {step === \"minting\" && \"Preparing Mint\"}\n            {step === \"waiting\" && \"Minting...\"}\n            {step === \"success\" && \"Mint Successful!\"}\n            {step === \"error\" && \"Mint Failed\"}\n          </SheetTitle>\n        </SheetHeader>\n\n        {/* Step 2: Sheet Content */}\n        {step === \"sheet\" && (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Contract</span>\n                <span className=\"font-mono text-sm\">\n                  {contractAddress.slice(0, 6)}...{contractAddress.slice(-4)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Quantity</span>\n                <span className=\"font-semibold\">{amount}</span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Price per NFT</span>\n                <span className=\"font-semibold\">\n                  {isLoadingPrice ? (\n                    \"Loading...\"\n                  ) : contractPrice === BigInt(0) ? (\n                    \"0 ETH\"\n                  ) : contractPrice ? (\n                    `${Number(formatEther(contractPrice)).toFixed(4)} ETH`\n                  ) : (\n                    \"Error loading price\"\n                  )}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 text-lg font-semibold\">\n                <span>Total Cost</span>\n                <span>{totalCost} ETH</span>\n              </div>\n            </div>\n            \n            <Button\n              onClick={isConnected ? handleMint : handleConnectWallet}\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={isWritePending}\n            >\n              {isConnected ? (\n                <>\n                  <Coins className=\"h-5 w-5 mr-2\" />\n                  Mint {amount} NFT{amount > 1 ? 's' : ''}\n                </>\n              ) : (\n                \"Connect Wallet to Mint\"\n              )}\n            </Button>\n          </div>\n        )}\n\n        {/* Step 3: Connecting */}\n        {step === \"connecting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <p className=\"text-muted-foreground\">\n              Connecting to your Farcaster wallet...\n            </p>\n          </div>\n        )}\n\n        {/* Step 3/4: Minting */}\n        {step === \"minting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Preparing mint transaction</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Please approve the transaction in your wallet\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Waiting for Transaction */}\n        {step === \"waiting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Transaction submitted</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Waiting for confirmation on the blockchain...\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Step 5: Success */}\n        {step === \"success\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <CheckCircle className=\"h-12 w-12 text-green-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-600\">Mint successful!</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Your {amount} NFT{amount > 1 ? 's have' : ' has'} been minted successfully\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n            <Button onClick={handleClose} className=\"w-full\">\n              Close\n            </Button>\n          </div>\n        )}\n\n        {/* Error State */}\n        {step === \"error\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-red-600\">Mint failed</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {error || \"An unexpected error occurred\"}\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={handleClose} className=\"flex-1\">\n                Close\n              </Button>\n              <Button onClick={handleRetry} className=\"flex-1\">\n                Try Again\n              </Button>\n            </div>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n} ",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"button\"> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean\r\n  }) {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n\r\nexport const formatLargeNumber = (num?: number): string => {\r\n  if (!num) return '0';\r\n\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1) + 'M';\r\n  } else if (num >= 2000) {\r\n    return (num / 1000).toFixed(1) + 'K';\r\n  } else {\r\n    return num.toString();\r\n  }\r\n};",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\sheet.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst sheetVariants = cva(\r\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition-all duration-300 ease-in-out border rounded-lg\",\r\n  {\r\n    variants: {\r\n      side: {\r\n        top: \"inset-x-4 top-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\r\n        bottom: \"inset-x-4 bottom-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\r\n        left: \"inset-y-4 left-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\r\n        right: \"inset-y-4 right-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      side: \"bottom\",\r\n    },\r\n  }\r\n)\r\n\r\ninterface SheetProps {\r\n  open?: boolean\r\n  onOpenChange?: (open: boolean) => void\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface SheetContentProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof sheetVariants> {\r\n  onClose?: () => void\r\n}\r\n\r\nconst SheetContext = React.createContext<{\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n}>({\r\n  open: false,\r\n  onOpenChange: () => {},\r\n})\r\n\r\nexport function Sheet({ open = false, onOpenChange, children }: SheetProps) {\r\n  return (\r\n    <SheetContext.Provider value={{ open, onOpenChange: onOpenChange || (() => {}) }}>\r\n      {children}\r\n    </SheetContext.Provider>\r\n  )\r\n}\r\n\r\nexport function SheetTrigger({ \r\n  children, \r\n  onClick,\r\n  ...props \r\n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\r\n  const { onOpenChange } = React.useContext(SheetContext)\r\n  \r\n  return (\r\n    <button\r\n      onClick={(e) => {\r\n        onOpenChange(true)\r\n        onClick?.(e)\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport function SheetContent({ \r\n  side = \"bottom\", \r\n  className, \r\n  children, \r\n  onClose,\r\n  ...props \r\n}: SheetContentProps) {\r\n  const { open, onOpenChange } = React.useContext(SheetContext)\r\n\r\n  const handleClose = () => {\r\n    onOpenChange(false)\r\n    onClose?.()\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\" && open) {\r\n        handleClose()\r\n      }\r\n    }\r\n\r\n    if (open) {\r\n      document.addEventListener(\"keydown\", handleEscape)\r\n      document.body.style.overflow = \"hidden\"\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleEscape)\r\n      document.body.style.overflow = \"unset\"\r\n    }\r\n  }, [open])\r\n\r\n  if (!open) return null\r\n\r\n  return (\r\n    <>\r\n      {/* Backdrop */}\r\n      <div \r\n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40\"\r\n        onClick={handleClose}\r\n      />\r\n      \r\n      {/* Sheet Content */}\r\n      <div\r\n        className={cn(sheetVariants({ side }), className)}\r\n        data-state={open ? \"open\" : \"closed\"}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <button\r\n          onClick={handleClose}\r\n          className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none p-1\"\r\n        >\r\n          <X className=\"h-4 w-4\" />\r\n          <span className=\"sr-only\">Close</span>\r\n        </button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport function SheetClose({ \r\n  children, \r\n  onClick,\r\n  ...props \r\n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\r\n  const { onOpenChange } = React.useContext(SheetContext)\r\n  \r\n  return (\r\n    <button\r\n      onClick={(e) => {\r\n        onOpenChange(false)\r\n        onClick?.(e)\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport function SheetHeader({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col space-y-2 text-center sm:text-left\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport function SheetFooter({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport function SheetTitle({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLHeadingElement>) {\r\n  return (\r\n    <h2\r\n      className={cn(\"text-lg font-semibold text-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport function SheetDescription({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLParagraphElement>) {\r\n  return (\r\n    <p\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n} ",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\hooks\\use-miniapp-sdk.ts",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport sdk from \"@farcaster/frame-sdk\";\r\nimport type { Context } from \"@farcaster/frame-core\";\r\nexport function useMiniAppSdk() {\r\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\r\n\r\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\r\n  const [context, setContext] = useState<Context.FrameContext>();\r\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\r\n  const [lastEvent, setLastEvent] = useState(\"\");\r\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\r\n  const [isSigningIn, setIsSigningIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!sdk) return;\r\n\r\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\r\n      setLastEvent(\r\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\r\n      );\r\n      setIsMiniAppSaved(true);\r\n    });\r\n\r\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\r\n      setLastEvent(`frameAddRejected, reason ${reason}`);\r\n    });\r\n\r\n    sdk.on(\"frameRemoved\", () => {\r\n      setLastEvent(\"frameRemoved\");\r\n      setIsMiniAppSaved(false);\r\n    });\r\n\r\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\r\n      setLastEvent(\"notificationsEnabled\");\r\n    });\r\n\r\n    sdk.on(\"notificationsDisabled\", () => {\r\n      setLastEvent(\"notificationsDisabled\");\r\n    });\r\n\r\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\r\n    sdk.actions.ready({});\r\n    setIsSDKLoaded(true);\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      sdk.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateContext = async () => {\r\n      const frameContext = await sdk.context;\r\n      if (frameContext) {\r\n        setContext(frameContext);\r\n        setIsMiniAppSaved(frameContext.client.added);\r\n      }\r\n    };\r\n\r\n    if (isSDKLoaded) {\r\n      updateContext();\r\n    }\r\n  }, [isSDKLoaded]);\r\n\r\n  const pinFrame = useCallback(async () => {\r\n    try {\r\n      const result = await sdk.actions.addFrame();\r\n      console.log(\"addFrame result\", result);\r\n      // @ts-expect-error - result type mixup\r\n      if (result.added) {\r\n        setPinFrameResponse(\r\n          result.notificationDetails\r\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\r\n            : \"Added, got no notification details\",\r\n        );\r\n      }\r\n    } catch (error) {\r\n      setPinFrameResponse(`Error: ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    context,\r\n    pinFrame,\r\n    pinFrameResponse,\r\n    isMiniAppSaved,\r\n    lastEvent,\r\n    sdk,\r\n    isSDKLoaded,\r\n    isAuthDialogOpen,\r\n    setIsAuthDialogOpen,\r\n    isSigningIn,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}