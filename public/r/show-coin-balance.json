{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "show-coin-balance",
  "type": "registry:component",
  "title": "Show Coin Balance",
  "description": "Show coin balance for an address using Alchemy SDK",
  "dependencies": [
    "viem",
    "alchemy-sdk",
    "clsx",
    "tailwind-merge",
    "alchemy-sdk",
    "viem"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/show-coin-balance/show-coin-balance.tsx",
      "content": "import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { Input } from \"@/registry/mini-app/ui/input\";\r\nimport { Alchemy, Network } from \"alchemy-sdk\";\r\nimport { parseUnits, isAddress } from \"viem\";\r\n\r\n// Helper function to check if input looks like an ENS name\r\nconst isEnsName = (input: string): boolean => {\r\n  return input.includes(\".\") && !isAddress(input) && input.length > 3;\r\n};\r\n\r\nexport function ShowCoinBalance({\r\n  defaultAddress,\r\n  defaultTokenAddress,\r\n  chainId,\r\n  network,\r\n}: {\r\n  defaultAddress?: string;\r\n  defaultTokenAddress?: `0x${string}`;\r\n  chainId?: number;\r\n  network?: Network;\r\n}) {\r\n  const [address, setAddress] = useState(defaultAddress || \"\");\r\n  const [tokenAddress, setTokenAddress] = useState(defaultTokenAddress || \"\");\r\n  const [balance, setBalance] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Check if address is valid (either a proper address or ENS name)\r\n  const isValidAddress = useMemo(() => {\r\n    return address && (isAddress(address) || isEnsName(address));\r\n  }, [address]);\r\n\r\n  const fetchTokenBalance = useCallback(\r\n    async (targetAddress: string, tokenAddr: string) => {\r\n      setLoading(true);\r\n      setError(null); // Clear any previous errors at start\r\n\r\n      try {\r\n        // Map chainId to Alchemy Network\r\n        const getAlchemyNetwork = (chainId: number): Network => {\r\n          switch (chainId) {\r\n            case 1:\r\n              return Network.ETH_MAINNET;\r\n            case 8453:\r\n              return Network.BASE_MAINNET;\r\n            case 42161:\r\n              return Network.ARB_MAINNET;\r\n            case 421614:\r\n              return Network.ARB_SEPOLIA;\r\n            case 84532:\r\n              return Network.BASE_SEPOLIA;\r\n            case 666666666:\r\n              return Network.DEGEN_MAINNET;\r\n            case 100:\r\n              return Network.GNOSIS_MAINNET;\r\n            case 10:\r\n              return Network.OPT_MAINNET;\r\n            case 11155420:\r\n              return Network.OPT_SEPOLIA;\r\n            case 137:\r\n              return Network.MATIC_MAINNET;\r\n            case 11155111:\r\n              return Network.ETH_SEPOLIA;\r\n            case 7777777:\r\n              return Network.ZORA_MAINNET;\r\n            case 42220:\r\n              return Network.CELO_MAINNET;\r\n            default:\r\n              return Network.BASE_MAINNET;\r\n          }\r\n        };\r\n\r\n        // Use provided network or map from chainId\r\n        const finalNetwork =\r\n          network ||\r\n          (chainId ? getAlchemyNetwork(chainId) : Network.BASE_MAINNET);\r\n\r\n        // Create mainnet instance for ENS resolution\r\n        const mainnetAlchemy = new Alchemy({\r\n          apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\r\n          network: Network.ETH_MAINNET,\r\n        });\r\n\r\n        // Create target network instance for token balance\r\n        const targetAlchemy = new Alchemy({\r\n          apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\r\n          network: finalNetwork,\r\n        });\r\n\r\n        // Resolve ENS if needed (always on mainnet)\r\n        let resolvedAddress: string | null = targetAddress;\r\n        if (isEnsName(targetAddress)) {\r\n          try {\r\n            resolvedAddress =\r\n              await mainnetAlchemy.core.resolveName(targetAddress);\r\n            if (!resolvedAddress) {\r\n              throw new Error(\"ENS name could not be resolved\");\r\n            }\r\n          } catch {\r\n            setError(\"Failed to resolve ENS name\");\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Fetch token metadata and balance on target network\r\n        const [tokenMeta, result] = await Promise.all([\r\n          targetAlchemy.core.getTokenMetadata(tokenAddr),\r\n          targetAlchemy.core.getTokenBalances(resolvedAddress, [tokenAddr]),\r\n        ]);\r\n\r\n        const raw = result.tokenBalances[0]?.tokenBalance ?? \"0\";\r\n        let formatted = raw;\r\n\r\n        if (tokenMeta && tokenMeta.decimals != null) {\r\n          const value = BigInt(raw);\r\n          // Format using parseUnits for display\r\n          const divisor = parseUnits(\"1\", tokenMeta.decimals);\r\n          const display = Number(value) / Number(divisor);\r\n          formatted = display.toFixed(4).replace(/\\.0+$/, \"\");\r\n          if (tokenMeta.symbol) formatted += ` ${tokenMeta.symbol}`;\r\n        }\r\n\r\n        setBalance(formatted);\r\n      } catch (e) {\r\n        console.error(e);\r\n        setError(\"Failed to fetch token balance\");\r\n      }\r\n      setLoading(false);\r\n    },\r\n    [chainId, network],\r\n  );\r\n\r\n  // Auto-fetch balance when we have both valid address and token address\r\n  useEffect(() => {\r\n    if (isValidAddress && tokenAddress && isAddress(tokenAddress)) {\r\n      fetchTokenBalance(address, tokenAddress);\r\n    } else {\r\n      setBalance(null);\r\n      // Only set validation errors if we don't have a successful balance\r\n      if (!balance) {\r\n        if (address && !isValidAddress) {\r\n          setError(\"Please enter a valid address or ENS name\");\r\n        } else if (tokenAddress && !isAddress(tokenAddress)) {\r\n          setError(\"Please enter a valid token address\");\r\n        } else {\r\n          setError(null);\r\n        }\r\n      }\r\n    }\r\n  }, [isValidAddress, address, tokenAddress, balance, fetchTokenBalance]);\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-card rounded-xl shadow p-4 mx-2 my-4 flex flex-col gap-4 min-w-80\">\r\n      <Input\r\n        className=\"w-full\"\r\n        placeholder=\"Enter address or ENS name (e.g., vitalik.eth)\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n      />\r\n      {!defaultTokenAddress && (\r\n        <Input\r\n          className=\"w-full placeholder:text-gray-400\"\r\n          placeholder=\"Enter token address\"\r\n          value={tokenAddress}\r\n          onChange={(e) => setTokenAddress(e.target.value)}\r\n        />\r\n      )}\r\n      {((loading && !balance) ||\r\n        (!isValidAddress && address) ||\r\n        (!tokenAddress && !balance)) && (\r\n        <div className=\"text-center text-sm text-muted-foreground min-h-5\">\r\n          {loading\r\n            ? \"Fetching balance...\"\r\n            : \"Enter both address and token address\"}\r\n        </div>\r\n      )}\r\n      {error && <div className=\"text-red-500 text-xs min-h-4\">{error}</div>}\r\n      {balance && (\r\n        <div className=\"text-lg font-bold flex items-center gap-2 min-h-7\">\r\n          <span className=\"text-muted-foreground\">Balance:</span> {balance}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry\\mini-app\\blocks\\show-coin-balance\\show-coin-balance.tsx",
      "content": "import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { Input } from \"@/registry/mini-app/ui/input\";\r\nimport { Alchemy, Network } from \"alchemy-sdk\";\r\nimport { parseUnits, isAddress } from \"viem\";\r\n\r\n// Helper function to check if input looks like an ENS name\r\nconst isEnsName = (input: string): boolean => {\r\n  return input.includes(\".\") && !isAddress(input) && input.length > 3;\r\n};\r\n\r\nexport function ShowCoinBalance({\r\n  defaultAddress,\r\n  defaultTokenAddress,\r\n  chainId,\r\n  network,\r\n}: {\r\n  defaultAddress?: string;\r\n  defaultTokenAddress?: `0x${string}`;\r\n  chainId?: number;\r\n  network?: Network;\r\n}) {\r\n  const [address, setAddress] = useState(defaultAddress || \"\");\r\n  const [tokenAddress, setTokenAddress] = useState(defaultTokenAddress || \"\");\r\n  const [balance, setBalance] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Check if address is valid (either a proper address or ENS name)\r\n  const isValidAddress = useMemo(() => {\r\n    return address && (isAddress(address) || isEnsName(address));\r\n  }, [address]);\r\n\r\n  const fetchTokenBalance = useCallback(\r\n    async (targetAddress: string, tokenAddr: string) => {\r\n      setLoading(true);\r\n      setError(null); // Clear any previous errors at start\r\n\r\n      try {\r\n        // Map chainId to Alchemy Network\r\n        const getAlchemyNetwork = (chainId: number): Network => {\r\n          switch (chainId) {\r\n            case 1:\r\n              return Network.ETH_MAINNET;\r\n            case 8453:\r\n              return Network.BASE_MAINNET;\r\n            case 42161:\r\n              return Network.ARB_MAINNET;\r\n            case 421614:\r\n              return Network.ARB_SEPOLIA;\r\n            case 84532:\r\n              return Network.BASE_SEPOLIA;\r\n            case 666666666:\r\n              return Network.DEGEN_MAINNET;\r\n            case 100:\r\n              return Network.GNOSIS_MAINNET;\r\n            case 10:\r\n              return Network.OPT_MAINNET;\r\n            case 11155420:\r\n              return Network.OPT_SEPOLIA;\r\n            case 137:\r\n              return Network.MATIC_MAINNET;\r\n            case 11155111:\r\n              return Network.ETH_SEPOLIA;\r\n            case 7777777:\r\n              return Network.ZORA_MAINNET;\r\n            case 42220:\r\n              return Network.CELO_MAINNET;\r\n            default:\r\n              return Network.BASE_MAINNET;\r\n          }\r\n        };\r\n\r\n        // Use provided network or map from chainId\r\n        const finalNetwork =\r\n          network ||\r\n          (chainId ? getAlchemyNetwork(chainId) : Network.BASE_MAINNET);\r\n\r\n        // Create mainnet instance for ENS resolution\r\n        const mainnetAlchemy = new Alchemy({\r\n          apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\r\n          network: Network.ETH_MAINNET,\r\n        });\r\n\r\n        // Create target network instance for token balance\r\n        const targetAlchemy = new Alchemy({\r\n          apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\r\n          network: finalNetwork,\r\n        });\r\n\r\n        // Resolve ENS if needed (always on mainnet)\r\n        let resolvedAddress: string | null = targetAddress;\r\n        if (isEnsName(targetAddress)) {\r\n          try {\r\n            resolvedAddress =\r\n              await mainnetAlchemy.core.resolveName(targetAddress);\r\n            if (!resolvedAddress) {\r\n              throw new Error(\"ENS name could not be resolved\");\r\n            }\r\n          } catch {\r\n            setError(\"Failed to resolve ENS name\");\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Fetch token metadata and balance on target network\r\n        const [tokenMeta, result] = await Promise.all([\r\n          targetAlchemy.core.getTokenMetadata(tokenAddr),\r\n          targetAlchemy.core.getTokenBalances(resolvedAddress, [tokenAddr]),\r\n        ]);\r\n\r\n        const raw = result.tokenBalances[0]?.tokenBalance ?? \"0\";\r\n        let formatted = raw;\r\n\r\n        if (tokenMeta && tokenMeta.decimals != null) {\r\n          const value = BigInt(raw);\r\n          // Format using parseUnits for display\r\n          const divisor = parseUnits(\"1\", tokenMeta.decimals);\r\n          const display = Number(value) / Number(divisor);\r\n          formatted = display.toFixed(4).replace(/\\.0+$/, \"\");\r\n          if (tokenMeta.symbol) formatted += ` ${tokenMeta.symbol}`;\r\n        }\r\n\r\n        setBalance(formatted);\r\n      } catch (e) {\r\n        console.error(e);\r\n        setError(\"Failed to fetch token balance\");\r\n      }\r\n      setLoading(false);\r\n    },\r\n    [chainId, network],\r\n  );\r\n\r\n  // Auto-fetch balance when we have both valid address and token address\r\n  useEffect(() => {\r\n    if (isValidAddress && tokenAddress && isAddress(tokenAddress)) {\r\n      fetchTokenBalance(address, tokenAddress);\r\n    } else {\r\n      setBalance(null);\r\n      // Only set validation errors if we don't have a successful balance\r\n      if (!balance) {\r\n        if (address && !isValidAddress) {\r\n          setError(\"Please enter a valid address or ENS name\");\r\n        } else if (tokenAddress && !isAddress(tokenAddress)) {\r\n          setError(\"Please enter a valid token address\");\r\n        } else {\r\n          setError(null);\r\n        }\r\n      }\r\n    }\r\n  }, [isValidAddress, address, tokenAddress, balance, fetchTokenBalance]);\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-card rounded-xl shadow p-4 mx-2 my-4 flex flex-col gap-4 min-w-80\">\r\n      <Input\r\n        className=\"w-full\"\r\n        placeholder=\"Enter address or ENS name (e.g., vitalik.eth)\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n      />\r\n      {!defaultTokenAddress && (\r\n        <Input\r\n          className=\"w-full placeholder:text-gray-400\"\r\n          placeholder=\"Enter token address\"\r\n          value={tokenAddress}\r\n          onChange={(e) => setTokenAddress(e.target.value)}\r\n        />\r\n      )}\r\n      {((loading && !balance) ||\r\n        (!isValidAddress && address) ||\r\n        (!tokenAddress && !balance)) && (\r\n        <div className=\"text-center text-sm text-muted-foreground min-h-5\">\r\n          {loading\r\n            ? \"Fetching balance...\"\r\n            : \"Enter both address and token address\"}\r\n        </div>\r\n      )}\r\n      {error && <div className=\"text-red-500 text-xs min-h-4\">{error}</div>}\r\n      {balance && (\r\n        <div className=\"text-lg font-bold flex items-center gap-2 min-h-7\">\r\n          <span className=\"text-muted-foreground\">Balance:</span> {balance}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\input.tsx",
      "content": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\r\n  return (\r\n    <input\r\n      type={type}\r\n      data-slot=\"input\"\r\n      className={cn(\r\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\r\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Input }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n\r\nexport const formatLargeNumber = (num?: number): string => {\r\n  if (!num) return '0';\r\n\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1) + 'M';\r\n  } else if (num >= 2000) {\r\n    return (num / 1000).toFixed(1) + 'K';\r\n  } else {\r\n    return num.toString();\r\n  }\r\n};",
      "type": "registry:lib",
      "target": ""
    }
  ]
}