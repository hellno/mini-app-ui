{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "share-bottom-sheet",
  "type": "registry:component",
  "title": "Share Bottom Sheet",
  "description": "A bottom sheet component for sharing content to Farcaster with customizable message",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog",
    "@farcaster/miniapp-sdk",
    "@farcaster/miniapp-core"
  ],
  "registryDependencies": [
    "button",
    "sheet",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/share-bottom-sheet/share-bottom-sheet.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n} from \"@/registry/mini-app/ui/sheet\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { Share } from \"lucide-react\";\n\nexport interface ShareBottomSheetProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  shareText: string;\n  shareUrl?: string;\n  title?: string;\n}\n\nexport function ShareBottomSheet({\n  open,\n  onOpenChange,\n  shareText,\n  shareUrl,\n  title = \"Inspire others to support!\",\n}: ShareBottomSheetProps) {\n  const { sdk } = useMiniAppSdk();\n  const [isSharing, setIsSharing] = useState(false);\n\n  const handleShare = async () => {\n    // Prevent double clicks\n    if (isSharing) return;\n    \n    setIsSharing(true);\n    \n    try {\n      const frameContext = await sdk.context;\n      \n      if (frameContext) {\n        // Use SDK to compose cast within the mini app\n        let cast: { text: string; embeds: [] | [string] } = {\n          text: shareText.slice(0, 320), // Enforce character limit\n          embeds: [],\n        };\n        if (shareUrl) {\n          cast.embeds = [shareUrl];\n        }\n        await sdk.actions.composeCast(cast);\n        onOpenChange(false);\n      } else {\n        // Fallback to Warpcast intent URL\n        const truncatedText = shareText.slice(0, 320);\n        const encodedText = encodeURIComponent(truncatedText);\n        const url = shareUrl\n          ? `https://warpcast.com/~/compose?text=${encodedText}&embeds[]=${encodeURIComponent(shareUrl)}`\n          : `https://warpcast.com/~/compose?text=${encodedText}`;\n        \n        window.open(url, \"_blank\");\n        onOpenChange(false);\n      }\n    } catch (error) {\n      console.error(\"Error sharing:\", error);\n      // Reset sharing state on error so user can retry\n      setIsSharing(false);\n    }\n  };\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent \n        side=\"bottom\" \n        className=\"rounded-t-2xl px-6 pb-8 pt-6\"\n      >\n        <div className=\"mx-auto max-w-md space-y-6\">\n          <SheetHeader>\n            <SheetTitle className=\"text-center text-2xl font-semibold\">\n              {title}\n            </SheetTitle>\n          </SheetHeader>\n\n          <div className=\"px-4\">\n            <p className=\"text-center text-base leading-relaxed text-muted-foreground line-clamp-4 italic\">\n              \"{shareText}\"\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleShare}\n              size=\"lg\"\n              className=\"w-full h-14 text-lg font-medium rounded-full\"\n              disabled={isSharing}\n            >\n              <Share className=\"mr-2 h-5 w-5\" />\n              {isSharing ? \"Sharing...\" : \"Share\"}\n            </Button>\n\n            <Button\n              onClick={() => onOpenChange(false)}\n              variant=\"ghost\"\n              size=\"lg\"\n              className=\"w-full h-12 text-base text-muted-foreground hover:text-foreground\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/registry/mini-app/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/sheet.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />;\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />;\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />;\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />;\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  );\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/miniapp-sdk\";\nimport { Context } from \"@farcaster/miniapp-core\";\n\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.MiniAppContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isMiniApp, setIsMiniApp] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"miniAppAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `miniAppAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"miniAppAddRejected\", ({ reason }) => {\n      setLastEvent(`miniAppAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"miniAppRemoved\", () => {\n      setLastEvent(\"miniAppRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n\n      const miniAppStatus = await sdk.isInMiniApp();\n      setIsMiniApp(miniAppStatus);\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addMiniApp();\n      console.log(\"addMiniApp result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isMiniApp,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "meta": {
    "demoUrl": "/component/share-bottom-sheet",
    "use_cases": [
      "Social Sharing",
      "Share Dialogs",
      "Call-to-Action Prompts",
      "Mobile-First Sharing"
    ],
    "keywords": [
      "share",
      "bottom-sheet",
      "cast",
      "farcaster",
      "social",
      "dialog",
      "modal"
    ]
  }
}