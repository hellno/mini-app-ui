{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-profile",
  "type": "registry:hook",
  "title": "useProfile",
  "description": "Hook to access and manage user profile information from Farcaster SDK",
  "dependencies": [
    "@farcaster/miniapp-core",
    "@farcaster/miniapp-sdk"
  ],
  "registryDependencies": [
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/hooks/use-profile.ts",
      "content": "\"use client\";\n\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport type ProfileData = {\n  fid?: number;\n  username?: string;\n  displayName?: string;\n  pfpUrl?: string;\n};\n\n/**\n * Hook to access the user profile information from the Farcaster SDK context\n * @returns ProfileData object containing user information and functions to interact with profiles\n */\nexport function useProfile() {\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\n  const [profile, setProfile] = useState<ProfileData>({});\n\n  useEffect(() => {\n    if (isSDKLoaded && context?.user) {\n      setProfile({\n        fid: context.user.fid,\n        username: context.user.username,\n        displayName: context.user.displayName,\n        pfpUrl: context.user.pfpUrl,\n      });\n    }\n  }, [context, isSDKLoaded]);\n\n  /**\n   * View a user's Farcaster profile\n   * @param fid - Farcaster ID of the user whose profile to view\n   */\n  const viewProfile = useCallback(async (fid?: number) => {\n    if (!fid) {\n      console.warn(\"No FID provided to viewProfile\");\n      return;\n    }\n    \n    try {\n      await sdk.actions.viewProfile({ fid });\n    } catch (error) {\n      console.error(\"Error viewing profile:\", error);\n    }\n  }, [sdk]);\n\n  /**\n   * View the current user's profile or another user's profile if fid is provided\n   */\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\n    const fidToView = specificFid || profile.fid;\n    if (fidToView) {\n      viewProfile(fidToView);\n    }\n  }, [profile.fid, viewProfile]);\n\n  return {\n    ...profile,\n    viewProfile,\n    viewCurrentOrSpecificProfile\n  };\n} ",
      "type": "registry:hook"
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/miniapp-sdk\";\nimport { Context } from \"@farcaster/miniapp-core\";\n\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.MiniAppContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isMiniApp, setIsMiniApp] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"miniAppAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `miniAppAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"miniAppAddRejected\", ({ reason }) => {\n      setLastEvent(`miniAppAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"miniAppRemoved\", () => {\n      setLastEvent(\"miniAppRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n\n      const miniAppStatus = await sdk.isInMiniApp();\n      setIsMiniApp(miniAppStatus);\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addMiniApp();\n      console.log(\"addMiniApp result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isMiniApp,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}