{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-profile",
  "type": "registry:hook",
  "title": "useProfile",
  "description": "Hook for accessing Farcaster user profile information",
  "dependencies": [
    "@farcaster/frame-core",
    "@farcaster/frame-sdk",
    "."
  ],
  "registryDependencies": [
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/hooks/use-profile.ts",
      "content": "\"use client\";\n\nimport { useMiniAppSdk } from \"./use-miniapp-sdk\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport type ProfileData = {\n  fid?: number;\n  username?: string;\n  displayName?: string;\n  pfpUrl?: string;\n};\n\n/**\n * Hook to access the user profile information from the Farcaster SDK context\n * @returns ProfileData object containing user information and functions to interact with profiles\n */\nexport function useProfile() {\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\n  const [profile, setProfile] = useState<ProfileData>({});\n\n  useEffect(() => {\n    if (isSDKLoaded && context?.user) {\n      setProfile({\n        fid: context.user.fid,\n        username: context.user.username,\n        displayName: context.user.displayName,\n        pfpUrl: context.user.pfpUrl,\n      });\n    }\n  }, [context, isSDKLoaded]);\n\n  /**\n   * View a user's Farcaster profile\n   * @param fid - Farcaster ID of the user whose profile to view\n   */\n  const viewProfile = useCallback(async (fid?: number) => {\n    if (!fid) {\n      console.warn(\"No FID provided to viewProfile\");\n      return;\n    }\n    \n    try {\n      await sdk.actions.viewProfile({ fid });\n    } catch (error) {\n      console.error(\"Error viewing profile:\", error);\n    }\n  }, [sdk]);\n\n  /**\n   * View the current user's profile or another user's profile if fid is provided\n   */\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\n    const fidToView = specificFid || profile.fid;\n    if (fidToView) {\n      viewProfile(fidToView);\n    }\n  }, [profile.fid, viewProfile]);\n\n  return {\n    ...profile,\n    viewProfile,\n    viewCurrentOrSpecificProfile\n  };\n} ",
      "type": "registry:hook"
    },
    {
      "path": "registry\\mini-app\\hooks\\use-profile.ts",
      "content": "\"use client\";\n\nimport { useMiniAppSdk } from \"./use-miniapp-sdk\";\nimport { useEffect, useState, useCallback } from \"react\";\n\nexport type ProfileData = {\n  fid?: number;\n  username?: string;\n  displayName?: string;\n  pfpUrl?: string;\n};\n\n/**\n * Hook to access the user profile information from the Farcaster SDK context\n * @returns ProfileData object containing user information and functions to interact with profiles\n */\nexport function useProfile() {\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\n  const [profile, setProfile] = useState<ProfileData>({});\n\n  useEffect(() => {\n    if (isSDKLoaded && context?.user) {\n      setProfile({\n        fid: context.user.fid,\n        username: context.user.username,\n        displayName: context.user.displayName,\n        pfpUrl: context.user.pfpUrl,\n      });\n    }\n  }, [context, isSDKLoaded]);\n\n  /**\n   * View a user's Farcaster profile\n   * @param fid - Farcaster ID of the user whose profile to view\n   */\n  const viewProfile = useCallback(async (fid?: number) => {\n    if (!fid) {\n      console.warn(\"No FID provided to viewProfile\");\n      return;\n    }\n    \n    try {\n      await sdk.actions.viewProfile({ fid });\n    } catch (error) {\n      console.error(\"Error viewing profile:\", error);\n    }\n  }, [sdk]);\n\n  /**\n   * View the current user's profile or another user's profile if fid is provided\n   */\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\n    const fidToView = specificFid || profile.fid;\n    if (fidToView) {\n      viewProfile(fidToView);\n    }\n  }, [profile.fid, viewProfile]);\n\n  return {\n    ...profile,\n    viewProfile,\n    viewCurrentOrSpecificProfile\n  };\n} ",
      "type": "registry:hook",
      "target": ""
    }
  ]
}