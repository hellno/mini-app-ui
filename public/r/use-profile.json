{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-profile",
  "type": "registry:hook",
  "title": "useProfile",
  "description": "Hook to access and manage user profile information from Farcaster SDK",
  "dependencies": [
    "@farcaster/frame-core",
    "@farcaster/frame-sdk",
    "."
  ],
  "registryDependencies": [
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/hooks/use-profile.ts",
      "content": "\"use client\";\r\n\r\nimport { useMiniAppSdk } from \"./use-miniapp-sdk\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\n\r\nexport type ProfileData = {\r\n  fid?: number;\r\n  username?: string;\r\n  displayName?: string;\r\n  pfpUrl?: string;\r\n};\r\n\r\n/**\r\n * Hook to access the user profile information from the Farcaster SDK context\r\n * @returns ProfileData object containing user information and functions to interact with profiles\r\n */\r\nexport function useProfile() {\r\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\r\n  const [profile, setProfile] = useState<ProfileData>({});\r\n\r\n  useEffect(() => {\r\n    if (isSDKLoaded && context?.user) {\r\n      setProfile({\r\n        fid: context.user.fid,\r\n        username: context.user.username,\r\n        displayName: context.user.displayName,\r\n        pfpUrl: context.user.pfpUrl,\r\n      });\r\n    }\r\n  }, [context, isSDKLoaded]);\r\n\r\n  /**\r\n   * View a user's Farcaster profile\r\n   * @param fid - Farcaster ID of the user whose profile to view\r\n   */\r\n  const viewProfile = useCallback(async (fid?: number) => {\r\n    if (!fid) {\r\n      console.warn(\"No FID provided to viewProfile\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await sdk.actions.viewProfile({ fid });\r\n    } catch (error) {\r\n      console.error(\"Error viewing profile:\", error);\r\n    }\r\n  }, [sdk]);\r\n\r\n  /**\r\n   * View the current user's profile or another user's profile if fid is provided\r\n   */\r\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\r\n    const fidToView = specificFid || profile.fid;\r\n    if (fidToView) {\r\n      viewProfile(fidToView);\r\n    }\r\n  }, [profile.fid, viewProfile]);\r\n\r\n  return {\r\n    ...profile,\r\n    viewProfile,\r\n    viewCurrentOrSpecificProfile\r\n  };\r\n} ",
      "type": "registry:hook"
    },
    {
      "path": "registry\\mini-app\\hooks\\use-profile.ts",
      "content": "\"use client\";\r\n\r\nimport { useMiniAppSdk } from \"./use-miniapp-sdk\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\n\r\nexport type ProfileData = {\r\n  fid?: number;\r\n  username?: string;\r\n  displayName?: string;\r\n  pfpUrl?: string;\r\n};\r\n\r\n/**\r\n * Hook to access the user profile information from the Farcaster SDK context\r\n * @returns ProfileData object containing user information and functions to interact with profiles\r\n */\r\nexport function useProfile() {\r\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\r\n  const [profile, setProfile] = useState<ProfileData>({});\r\n\r\n  useEffect(() => {\r\n    if (isSDKLoaded && context?.user) {\r\n      setProfile({\r\n        fid: context.user.fid,\r\n        username: context.user.username,\r\n        displayName: context.user.displayName,\r\n        pfpUrl: context.user.pfpUrl,\r\n      });\r\n    }\r\n  }, [context, isSDKLoaded]);\r\n\r\n  /**\r\n   * View a user's Farcaster profile\r\n   * @param fid - Farcaster ID of the user whose profile to view\r\n   */\r\n  const viewProfile = useCallback(async (fid?: number) => {\r\n    if (!fid) {\r\n      console.warn(\"No FID provided to viewProfile\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await sdk.actions.viewProfile({ fid });\r\n    } catch (error) {\r\n      console.error(\"Error viewing profile:\", error);\r\n    }\r\n  }, [sdk]);\r\n\r\n  /**\r\n   * View the current user's profile or another user's profile if fid is provided\r\n   */\r\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\r\n    const fidToView = specificFid || profile.fid;\r\n    if (fidToView) {\r\n      viewProfile(fidToView);\r\n    }\r\n  }, [profile.fid, viewProfile]);\r\n\r\n  return {\r\n    ...profile,\r\n    viewProfile,\r\n    viewCurrentOrSpecificProfile\r\n  };\r\n} ",
      "type": "registry:hook",
      "target": ""
    }
  ]
}