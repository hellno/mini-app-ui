{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "manifold-nft-mint",
  "type": "registry:block",
  "description": "A complete Manifold NFT minting flow component with wallet connection, transaction handling, and 5-step user experience",
  "dependencies": [
    "lucide-react",
    "wagmi",
    "viem",
    "@farcaster/frame-wagmi-connector",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core"
  ],
  "devDependencies": [],
  "registryDependencies": [
    "button",
    "sheet"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/manifold-nft-mint/manifold-nft-mint.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/registry/mini-app/ui/sheet\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { useAccount, useConnect, useWriteContract} from \"wagmi\";\nimport { formatEther, type Address } from \"viem\";\nimport { farcasterFrame } from \"@farcaster/frame-wagmi-connector\";\nimport { Coins, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Claim, ERC20Abi, getClientForChain, getNftDetails, manifoldERC1155ExtensionAbi } from \"./config\";\n\ntype ManifoldNFTMintFlowProps = {\n  chainId: number;\n  contractAddress: Address;\n  instanceId?: string;\n  tokenId?: string;\n  className?: string;\n  variant?: \"default\" | \"destructive\" | \"secondary\" | \"ghost\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  buttonText?: string;\n  disabled?: boolean;\n  onMintSuccess?: (txHash: string) => void;\n  onMintError?: (error: string) => void;\n};\n\ntype MintStep = \"initial\" | \"approve\" | \"sheet\" | \"connecting\" | \"minting\" | \"waiting\" | \"success\" | \"error\" | \"warning\";\n\nexport type Config = {\n  contractAddress: Address;\n  instanceId: string;\n  chainId: number;\n  tokenId: bigint;\n  claim: Claim;\n  extenstionContractAddress: Address;\n  erc20ContractAddress?: Address;\n  erc20Decimals?: number;\n  erc20Symbol?: string;\n  mintFee?: string;\n}\n\nexport function ManifoldNFTMint({\n  chainId,\n  contractAddress,\n  instanceId,\n  tokenId,\n  className,\n  variant = \"default\",\n  size = \"default\",\n  buttonText = \"Mint NFT\",\n  disabled = false,\n  onMintSuccess,\n  onMintError,\n}: ManifoldNFTMintFlowProps) {\n  const [step, setStep] = React.useState<MintStep>(\"initial\");\n  const [error, setError] = React.useState<string>(\"\");\n  const [txHash, setTxHash] = React.useState<string>(\"\");\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSheetOpen, setIsSheetOpen] = React.useState(false);\n  const { isSDKLoaded } = useMiniAppSdk();\n  const { isConnected, address } = useAccount();\n  const { connect } = useConnect();\n  const { writeContractAsync , isError, error: writeContractError} = useWriteContract();\n\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  const [mintfee, setMintFee] = React.useState<string>(\"\");\n \n\n  // Reset error when step changes\n  React.useEffect(() => {\n    if (step !== \"error\" && step !== \"warning\") {\n      setError(\"\");\n    }\n    if(isError){\n      if(writeContractError.message.includes(\"User rejected the request\")){\n        setIsLoading(false);\n        setIsSheetOpen(false);\n        onMintError?.(\"User rejected the request\");\n        return;\n      }\n      setError(writeContractError.message || \"Could not mint\");\n      setStep(\"error\");\n      onMintError?.(writeContractError.message || \"Could not mint\");\n    }\n  }, [step, isError, error, onMintError, writeContractError]);\n\n  const handleInitialMint = async () => {\n    setIsLoading(true);\n    if (!isSDKLoaded) {\n      setError(\"Farcaster SDK not loaded\");\n      setStep(\"error\");\n      setIsSheetOpen(true);\n      return;\n    }\n    try{\n      const config = await getNftDetails(contractAddress, instanceId as string, tokenId as string, chainId);\n      setConfig(config);\n      if(config.claim?.erc20 !== \"0x0000000000000000000000000000000000000000\"){\n        await checkAllowance();\n        \n        setMintFee(formatEther(BigInt(config.mintFee || \"0\")));\n      }else{\n        const mintFee = formatEther(BigInt(config.mintFee || \"0\"))+formatEther(BigInt(config.claim?.cost || \"0\"));\n        setMintFee(mintFee);\n        setStep(\"sheet\");\n      }\n\n      if(config.claim?.merkleRoot !== \"0x0000000000000000000000000000000000000000000000000000000000000000\"){\n        setError(\"This NFT requires a merkle proof to mint. We are not supporting this yet.\");\n        setStep(\"warning\");\n        setIsLoading(false);\n        setIsSheetOpen(true);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Failed to get NFT details:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Failed to get NFT details\";\n      setError(errorMessage);\n      setStep(\"error\");\n      setIsLoading(false);\n    } finally {\n    setIsSheetOpen(true);\n    }\n  };\n\n  const handleConnectWallet = React.useCallback(async () => {\n    try {\n      setStep(\"connecting\");\n      const connector = farcasterFrame();\n      connect({ connector });\n \n    } catch (err) {\n      console.error(\"Failed to connect wallet:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Failed to connect wallet\";\n      \n      // For other errors, show error state\n      setError(errorMessage);\n      setStep(\"error\");\n    }\n  }, [connect]);\n\n  const checkAllowance = React.useCallback(async () => {\n    if(!isConnected){\n      await handleConnectWallet();\n      return;\n    }\n    if (!config?.claim?.erc20) {\n      setError(\"ERC20 contract not found\");\n      setStep(\"error\");\n      setIsLoading(false);\n      return;\n    }\n    if(!config.claim?.cost){\n      setError(\"Cost not found\");\n      setStep(\"error\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const publicClient = getClientForChain(chainId);\n      const allowance = await publicClient.readContract({\n        address: config.claim?.erc20,\n        abi: ERC20Abi,\n        functionName: \"allowance\",\n        args: [address as Address, config.contractAddress],\n      });\n      if(allowance < BigInt(config.claim?.cost)){\n        setStep(\"approve\");\n      }else{\n        setStep(\"sheet\");\n      }\n    } catch (err) {\n      console.error(\"Error checking allowance:\", err);\n      setError(\"Could not check allowance\");\n      setStep(\"error\");\n      setIsLoading(false);\n    }\n  }, [isConnected, config, chainId, address, handleConnectWallet]);\n\n\n  React.useEffect(() => {\n    if(isConnected){\n      if(config){\n        checkAllowance();\n    }else{\n      setIsSheetOpen(false);\n    }\n    }\n  }, [isConnected, config, checkAllowance]);\n\n\n  const handleApprove = async () => {\n    if (!isConnected) {\n      await handleConnectWallet();\n      return;\n    }\n    setIsLoading(true);\n    if(!config || !config.claim?.cost){\n      setError(\"Could not approve\");\n      setStep(\"error\");\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      const approveTx = await writeContractAsync({\n        address: config.erc20ContractAddress as Address,\n        abi: ERC20Abi,\n        functionName: \"approve\",\n        // Use the exact amount needed for this mint\n        args: [config.contractAddress, BigInt(config.claim?.cost)], // spender, exact amount\n        chainId: config.chainId,\n      });\n      setTxHash(approveTx);\n      setStep(\"sheet\");\n    } catch (err) {\n      console.error(\"Error approving:\", err);\n      setError(\"Could not approve\");\n      setStep(\"error\");\n    } finally {\n      setIsLoading(false);\n    }   \n  }\n\n  \n  const handleMint = async () => {\n    if (!isConnected) {\n      await handleConnectWallet();\n      return;\n    }\n    setIsLoading(true);\n    if(!config){\n      setError(\"Could not fetch NFT details\");\n      setStep(\"error\");\n      setIsLoading(false);\n      return;\n    }\n\n    if(!config.mintFee){\n      setError(\"Could not fetch mint fee\");\n      setStep(\"error\");\n      setIsLoading(false);\n      return;\n    }\n    try{\n      \n      await checkAllowance();\n      let mintTx: string | undefined;\n      if(config.claim?.erc20 === \"0x0000000000000000000000000000000000000000\"){\n      setStep(\"minting\");\n      const mintFees = BigInt(config.mintFee)+BigInt(config.claim?.cost);\n      mintTx = await writeContractAsync({\n        address: config.extenstionContractAddress,\n        abi: manifoldERC1155ExtensionAbi,\n        functionName: \"mint\",\n        args: [config.contractAddress, BigInt(config.instanceId), Number(config.tokenId), [], address as Address],\n        chainId: config.chainId,\n        value: mintFees,\n      });\n      setTxHash(mintTx);\n    }else{\n      setStep(\"minting\");\n      const mintFees = BigInt(config.mintFee);\n      mintTx = await writeContractAsync({\n        address: config.extenstionContractAddress,\n        abi: manifoldERC1155ExtensionAbi,\n        functionName: \"mint\",\n        args: [config.contractAddress, BigInt(config.instanceId), Number(config.tokenId), [], address as Address],\n        chainId: config.chainId,\n        value: mintFees,\n      });\n    }\n    setTxHash(mintTx);\n    if(mintTx){\n      setStep(\"success\");\n      onMintSuccess?.(mintTx);\n    }else{\n      setError(\"Could not mint\");\n      setStep(\"error\");\n      onMintError?.(\"Could not mint\");\n    }\n  } catch (err) {\n    console.error(\"Error minting:\", err);\n    if(err instanceof Error){\n      setError(err.message);\n    }else{\n      setError(\"Could not mint\");\n    }\n    setStep(\"error\");\n    onMintError?.(\"Could not mint\");\n  } finally {\n    setIsLoading(false);\n    setIsSheetOpen(false);\n  }\n  };\n\n  const handleClose = () => {\n    setIsSheetOpen(false);\n    setStep(\"initial\");\n    setError(\"\");\n    setTxHash(\"\");\n    setIsLoading(false);\n  };\n\n  const handleRetry = () => {\n    setError(\"\");\n    setStep(\"sheet\");\n    setIsLoading(false);\n  };\n\n  return (\n    <Sheet open={isSheetOpen} onOpenChange={(open) => {\n      setIsSheetOpen(open);\n      if (!open) {\n        handleClose();\n      }\n    }}>\n      <Button\n        variant={variant}\n        size={size}\n        onClick={handleInitialMint}\n        disabled={disabled || !isSDKLoaded || isLoading}\n        className={cn(\"w-full\", className)}\n      >\n        <Coins className=\"h-4 w-4 mr-2\" />\n        {buttonText}\n      </Button>\n\n      <SheetContent side=\"bottom\" onClose={handleClose}>\n        <SheetHeader className=\"mb-6\">\n          <SheetTitle>\n            {step === \"sheet\" && \"Mint NFT\"}\n            {step === \"connecting\" && \"Connecting Wallet\"}\n            {step === \"minting\" && \"Preparing Mint\"}\n            {step === \"waiting\" && \"Minting...\"}\n            {step === \"success\" && \"Mint Successful!\"}\n            {step === \"error\" && \"Mint Failed\"}\n            {step === \"warning\" && \"Warning\"}\n          </SheetTitle>\n        </SheetHeader>\n\n        {step === \"approve\" && (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Contract</span>\n                <span className=\"font-mono text-sm\">\n                  {contractAddress.slice(0, 6)}...{contractAddress.slice(-4)}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Price per NFT</span>\n                <span className=\"font-semibold\">\n                  {config?.claim ? Number(Number(config?.claim?.cost)) / 10 ** (config?.erc20Decimals || 18) : \"0\"} {config?.erc20Symbol}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 text-lg font-semibold\">\n                <span>Total Cost</span>\n                <span>{config?.claim ? Number(Number(config?.claim?.cost)) / 10 ** (config?.erc20Decimals || 18) : \"0\"} {config?.erc20Symbol}</span>\n              </div>\n            </div>\n            \n            <Button\n              onClick={handleApprove}\n              size=\"lg\"\n              className=\"w-full\"\n              \n            >\n              \n                  <Coins className=\"h-5 w-5 mr-2\" />\n                  Approve {config?.erc20Symbol}\n                \n              \n            </Button>\n          </div>\n        )}\n\n        {/* Step 2: Sheet Content */}\n      {step === \"sheet\" && (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Contract</span>\n                <span className=\"font-mono text-sm\">\n                  {contractAddress.slice(0, 6)}...{contractAddress.slice(-4)}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between items-center py-3 border-b\">\n                <span className=\"text-muted-foreground\">Mint Price</span>\n                <span className=\"font-semibold\">\n                  { config?.claim ? Number(Number(config?.claim?.cost)) / 10 ** (config?.erc20Decimals || 18) : \"0\"} {config?.erc20Symbol}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-3 text-lg font-semibold\">\n                <span>Mint Fee</span>\n                <span>{mintfee} ETH</span>\n              </div>\n            </div>\n            \n            <Button\n              onClick={isConnected ? handleMint : handleConnectWallet}\n              size=\"lg\"\n              className=\"w-full\"\n              disabled={isConnected ? false : true || isLoading}\n            >\n              {isConnected ? (\n                <>\n                  <Coins className=\"h-5 w-5 mr-2\" />\n                  Mint \n                </>\n              ) : (\n                \"Connect Wallet to Mint\"\n              )}\n            </Button>\n          </div>\n        )} \n\n        {/* Step 3: Connecting */}\n        {step === \"connecting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <p className=\"text-muted-foreground\">\n              Connecting to your Farcaster wallet...\n            </p>\n          </div>\n        )}\n\n        {/* Step 3/4: Minting */}\n        {step === \"minting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Preparing mint transaction</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Please approve the transaction in your wallet\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Waiting for Transaction */}\n        {step === \"waiting\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">Transaction submitted</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Waiting for confirmation on the blockchain...\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Step 5: Success */}\n        {step === \"success\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <CheckCircle className=\"h-12 w-12 text-green-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-600\">Mint successful!</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Your NFT has been minted successfully\n              </p>\n              {txHash && (\n                <p className=\"text-xs font-mono mt-2 px-3 py-1 bg-muted rounded\">\n                  {txHash.slice(0, 10)}...{txHash.slice(-8)}\n                </p>\n              )}\n            </div>\n            <Button onClick={handleClose} className=\"w-full\">\n              Close\n            </Button>\n          </div>\n        )}\n\n        {/* Error State */}\n        {step === \"error\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-red-600\">Mint failed</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {error || \"An unexpected error occurred\"}\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={handleClose} className=\"flex-1\">\n                Close\n              </Button>\n              <Button onClick={handleRetry} className=\"flex-1\">\n                Try Again\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Warning State */}\n        {step === \"warning\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <AlertCircle className=\"h-12 w-12 text-yellow-500\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-yellow-600\">Warning</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {error || \"An unexpected error occurred\"}\n              </p>\n            </div>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n} ",
      "type": "registry:block"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/sheet.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition-all duration-300 ease-in-out border rounded-lg\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-4 top-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom: \"inset-x-4 bottom-4 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-4 left-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\n        right: \"inset-y-4 right-4 w-3/4 max-w-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\n      },\n    },\n    defaultVariants: {\n      side: \"bottom\",\n    },\n  }\n)\n\ninterface SheetProps {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  children: React.ReactNode\n}\n\ninterface SheetContentProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof sheetVariants> {\n  onClose?: () => void\n}\n\nconst SheetContext = React.createContext<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}>({\n  open: false,\n  onOpenChange: () => {},\n})\n\nexport function Sheet({ open = false, onOpenChange, children }: SheetProps) {\n  return (\n    <SheetContext.Provider value={{ open, onOpenChange: onOpenChange || (() => {}) }}>\n      {children}\n    </SheetContext.Provider>\n  )\n}\n\nexport function SheetTrigger({ \n  children, \n  onClick,\n  ...props \n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  const { onOpenChange } = React.useContext(SheetContext)\n  \n  return (\n    <button\n      onClick={(e) => {\n        onOpenChange(true)\n        onClick?.(e)\n      }}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport function SheetContent({ \n  side = \"bottom\", \n  className, \n  children, \n  onClose,\n  ...props \n}: SheetContentProps) {\n  const { open, onOpenChange } = React.useContext(SheetContext)\n\n  const handleClose = () => {\n    onOpenChange(false)\n    onClose?.()\n  }\n\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && open) {\n        handleClose()\n      }\n    }\n\n    if (open) {\n      document.addEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"hidden\"\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscape)\n      document.body.style.overflow = \"unset\"\n    }\n  }, [open])\n\n  if (!open) return null\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40\"\n        onClick={handleClose}\n      />\n      \n      {/* Sheet Content */}\n      <div\n        className={cn(sheetVariants({ side }), className)}\n        data-state={open ? \"open\" : \"closed\"}\n        {...props}\n      >\n        {children}\n        <button\n          onClick={handleClose}\n          className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none p-1\"\n        >\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport function SheetClose({ \n  children, \n  onClick,\n  ...props \n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n  const { onOpenChange } = React.useContext(SheetContext)\n  \n  return (\n    <button\n      onClick={(e) => {\n        onOpenChange(false)\n        onClick?.(e)\n      }}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport function SheetHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col space-y-2 text-center sm:text-left\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function SheetFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function SheetTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h2\n      className={cn(\"text-lg font-semibold text-foreground\", className)}\n      {...props}\n    />\n  )\n}\n\nexport function SheetDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <p\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n} ",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/frame-sdk\";\nimport type { Context } from \"@farcaster/frame-core\";\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.FrameContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isSigningIn, setIsSigningIn] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\n      setLastEvent(`frameAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"frameRemoved\", () => {\n      setLastEvent(\"frameRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addFrame();\n      console.log(\"addFrame result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isSigningIn,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}