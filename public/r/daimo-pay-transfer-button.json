{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "daimo-pay-transfer-button",
  "type": "registry:component",
  "title": "Daimo Pay Button Token Transfer",
  "description": "A custom button for transferring tokens",
  "dependencies": [
    "@daimo/pay",
    "@daimo/contract",
    "wagmi",
    "viem",
    "@farcaster/frame-wagmi-connector",
    "@daimo/pay",
    "@daimo/contract",
    "viem",
    "wagmi",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/daimo-pay-transfer/components/daimo-pay-transfer-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { DaimoPayButton } from \"@daimo/pay\";\r\nimport { baseUSDC } from \"@daimo/contract\";\r\nimport { getAddress } from \"viem\";\r\nimport { useAccount } from \"wagmi\";\r\nimport { Button } from \"@/registry/mini-app/ui/button\";\r\n\r\nexport function DaimoPayTransferButton({\r\n  text,\r\n  toChainId,\r\n  toAddress,\r\n  tokenAddress,\r\n  amount,\r\n  onPaymentStarted,\r\n  onPaymentCompleted,\r\n}: {\r\n  text: string;\r\n  toAddress: `0x${string}`;\r\n  amount: string;\r\n  tokenAddress?: `0x${string}`;\r\n  toChainId?: number;\r\n  onPaymentStarted?: () => void;\r\n  onPaymentCompleted?: () => void;\r\n}) {\r\n  return (\r\n    <div className=\"flex justify-center text-xl font-bold rounded-lg shadow-lg\">\r\n      <DaimoPayButton.Custom\r\n        appId={process.env.NEXT_PUBLIC_DAIMO_PAY_KEY || \"pay-demo\"}\r\n        toChain={toChainId || baseUSDC.chainId}\r\n        toUnits={amount}\r\n        toToken={tokenAddress || getAddress(baseUSDC.token)}\r\n        toAddress={toAddress}\r\n        onPaymentStarted={(e) => {\r\n          console.log(\"Payment started\", e);\r\n          onPaymentStarted?.();\r\n        }}\r\n        onPaymentCompleted={(e) => {\r\n          console.log(\"Payment completed\", e);\r\n          onPaymentCompleted?.();\r\n        }}\r\n        closeOnSuccess\r\n      >\r\n        {({ show: showDaimoModal }) => (\r\n          <Button className=\"w-full\" size=\"lg\" onClick={() => showDaimoModal()}>\r\n            {text}\r\n          </Button>\r\n        )}\r\n      </DaimoPayButton.Custom>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/blocks/daimo-pay-transfer/components/wagmi-provider.tsx",
      "content": "\"use client\";\r\n\r\nimport { createConfig, http, injected, WagmiProvider } from \"wagmi\";\r\nimport { base, degen, mainnet, optimism } from \"wagmi/chains\";\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { farcasterFrame } from \"@farcaster/frame-wagmi-connector\";\r\nimport { DaimoPayProvider, getDefaultConfig } from \"@daimo/pay\";\r\n\r\nconst alchemyApiKey = process.env.NEXT_PUBLIC_ALCHEMY_KEY;\r\n\r\nexport const config = createConfig(\r\n  getDefaultConfig({\r\n    appName: \"hi\",\r\n    chains: [base, degen, mainnet, optimism],\r\n    additionalConnectors: [farcasterFrame(), injected()],\r\n    transports: {\r\n      [base.id]: http(\r\n        alchemyApiKey\r\n          ? `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`\r\n          : undefined,\r\n      ),\r\n    },\r\n  }),\r\n);\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport default function OnchainProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <WagmiProvider config={config}>\r\n      <QueryClientProvider client={queryClient}>\r\n        <DaimoPayProvider>{children}</DaimoPayProvider>\r\n      </QueryClientProvider>\r\n    </WagmiProvider>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry\\mini-app\\blocks\\daimo-pay-transfer\\components\\daimo-pay-transfer-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { DaimoPayButton } from \"@daimo/pay\";\r\nimport { baseUSDC } from \"@daimo/contract\";\r\nimport { getAddress } from \"viem\";\r\nimport { useAccount } from \"wagmi\";\r\nimport { Button } from \"@/registry/mini-app/ui/button\";\r\n\r\nexport function DaimoPayTransferButton({\r\n  text,\r\n  toChainId,\r\n  toAddress,\r\n  tokenAddress,\r\n  amount,\r\n  onPaymentStarted,\r\n  onPaymentCompleted,\r\n}: {\r\n  text: string;\r\n  toAddress: `0x${string}`;\r\n  amount: string;\r\n  tokenAddress?: `0x${string}`;\r\n  toChainId?: number;\r\n  onPaymentStarted?: () => void;\r\n  onPaymentCompleted?: () => void;\r\n}) {\r\n  return (\r\n    <div className=\"flex justify-center text-xl font-bold rounded-lg shadow-lg\">\r\n      <DaimoPayButton.Custom\r\n        appId={process.env.NEXT_PUBLIC_DAIMO_PAY_KEY || \"pay-demo\"}\r\n        toChain={toChainId || baseUSDC.chainId}\r\n        toUnits={amount}\r\n        toToken={tokenAddress || getAddress(baseUSDC.token)}\r\n        toAddress={toAddress}\r\n        onPaymentStarted={(e) => {\r\n          console.log(\"Payment started\", e);\r\n          onPaymentStarted?.();\r\n        }}\r\n        onPaymentCompleted={(e) => {\r\n          console.log(\"Payment completed\", e);\r\n          onPaymentCompleted?.();\r\n        }}\r\n        closeOnSuccess\r\n      >\r\n        {({ show: showDaimoModal }) => (\r\n          <Button className=\"w-full\" size=\"lg\" onClick={() => showDaimoModal()}>\r\n            {text}\r\n          </Button>\r\n        )}\r\n      </DaimoPayButton.Custom>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"button\"> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean\r\n  }) {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ],
  "meta": {
    "mediaUrl": "/previews/daimo-pay-transfer-button.mp4",
    "demoUrl": "/component/daimo-pay-transfer-button"
  }
}