{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "daimo-pay-transfer-button",
  "type": "registry:component",
  "title": "Daimo Pay Button Token Transfer",
  "description": "A custom button for transferring tokens",
  "dependencies": [
    "@daimo/pay",
    "@daimo/contract",
    "wagmi",
    "viem",
    "@farcaster/frame-wagmi-connector",
    "@daimo/pay",
    "@daimo/contract",
    "viem",
    "wagmi",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/daimo-pay-transfer/components/daimo-pay-transfer-button.tsx",
      "content": "\"use client\";\n\nimport { DaimoPayButton } from \"@daimo/pay\";\nimport { baseUSDC } from \"@daimo/contract\";\nimport { getAddress } from \"viem\";\nimport { useAccount } from \"wagmi\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\n\nexport function DaimoPayTransferButton({\n  text,\n  toChainId,\n  toAddress,\n  tokenAddress,\n  amount,\n  onPaymentStarted,\n  onPaymentCompleted,\n}: {\n  text: string;\n  toAddress: `0x${string}`;\n  amount: string;\n  tokenAddress?: `0x${string}`;\n  toChainId?: number;\n  onPaymentStarted?: () => void;\n  onPaymentCompleted?: () => void;\n}) {\n  return (\n    <div className=\"flex justify-center text-xl font-bold rounded-lg shadow-lg\">\n      <DaimoPayButton.Custom\n        appId={process.env.NEXT_PUBLIC_DAIMO_PAY_KEY || \"pay-demo\"}\n        toChain={toChainId || baseUSDC.chainId}\n        toUnits={amount}\n        toToken={tokenAddress || getAddress(baseUSDC.token)}\n        toAddress={toAddress}\n        onPaymentStarted={(e) => {\n          console.log(\"Payment started\", e);\n          onPaymentStarted?.();\n        }}\n        onPaymentCompleted={(e) => {\n          console.log(\"Payment completed\", e);\n          onPaymentCompleted?.();\n        }}\n        closeOnSuccess\n      >\n        {({ show: showDaimoModal }) => (\n          <Button className=\"w-full\" size=\"lg\" onClick={() => showDaimoModal()}>\n            {text}\n          </Button>\n        )}\n      </DaimoPayButton.Custom>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/blocks/daimo-pay-transfer/components/wagmi-provider.tsx",
      "content": "\"use client\";\n\nimport { createConfig, http, injected, WagmiProvider } from \"wagmi\";\nimport { base, degen, mainnet, optimism } from \"wagmi/chains\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { farcasterFrame } from \"@farcaster/frame-wagmi-connector\";\nimport { DaimoPayProvider, getDefaultConfig } from \"@daimo/pay\";\n\nconst alchemyApiKey = process.env.NEXT_PUBLIC_ALCHEMY_KEY;\n\nexport const config = createConfig(\n  getDefaultConfig({\n    appName: \"hi\",\n    chains: [base, degen, mainnet, optimism],\n    additionalConnectors: [farcasterFrame(), injected()],\n    transports: {\n      [base.id]: http(\n        alchemyApiKey\n          ? `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`\n          : undefined,\n      ),\n    },\n  }),\n);\n\nconst queryClient = new QueryClient();\n\nexport default function OnchainProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <DaimoPayProvider>{children}</DaimoPayProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "meta": {
    "mediaUrl": "/previews/daimo-pay-transfer-button.mp4",
    "demoUrl": "/component/daimo-pay-transfer-button"
  }
}