{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profile-search",
  "type": "registry:component",
  "title": "Profile Search",
  "description": "Search Farcaster users with Neynar API and view profiles using mini app SDK. Shows results in clickable cards with user details.",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/profile-search/profile-search.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Input } from \"@/registry/mini-app/ui/input\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { Search, User, Users, X } from \"lucide-react\";\nimport { cn, formatLargeNumber } from \"@/lib/utils\";\n\n// Types based on Neynar API response\nexport type FarcasterUser = {\n  fid: number;\n  username: string;\n  display_name: string;\n  pfp_url: string;\n  follower_count: number;\n  following_count: number;\n  power_badge?: boolean;\n  profile?: {\n    bio?: {\n      text?: string;\n    };\n  };\n  verified_addresses?: {\n    eth_addresses?: string[];\n  };\n};\n\nexport type NeynarSearchResponse = {\n  result: {\n    users: FarcasterUser[];\n    next?: {\n      cursor: string;\n    };\n  };\n};\n\ntype ProfileSearchProps = {\n  apiKey: string;\n  placeholder?: string;\n  variant?: \"destructive\" | \"secondary\" | \"ghost\" | \"default\";\n  className?: string;\n  inputClassName?: string;\n  buttonClassName?: string;\n  layout?: \"horizontal\" | \"vertical\";\n  showIcon?: boolean;\n  autoSearch?: boolean;\n  maxResults?: number;\n  searchFunction?: (query: string, apiKey: string, maxResults: number) => Promise<{ users: FarcasterUser[], total: number }> ;\n  userCardComponent?: React.ComponentType<UserCardProps>;\n  onError?: (error: string) => void;\n};\n\nexport const calculateRelevanceScore = (user: FarcasterUser, query: string): number => {\n    const lowerQuery = query.toLowerCase();\n    const username = user.username.toLowerCase();\n    const displayName = user.display_name.toLowerCase();\n    const bio = user.profile?.bio?.text?.toLowerCase() || \"\";\n    \n    let score = 0;\n    \n    // Exact matches get highest score\n    if (username === lowerQuery) score += 1000;\n    if (displayName === lowerQuery) score += 900;\n    \n    // Username starts with query gets high score\n    if (username.startsWith(lowerQuery)) score += 800;\n    if (displayName.startsWith(lowerQuery)) score += 700;\n    \n    // Username contains query\n    if (username.includes(lowerQuery)) score += 600;\n    if (displayName.includes(lowerQuery)) score += 500;\n    \n    // Bio contains query\n    if (bio.includes(lowerQuery)) score += 300;\n    \n    // FID match\n    if (user.fid.toString() === query) score += 950;\n    \n    // Bonus for shorter usernames (more relevant for short queries)\n    if (username.includes(lowerQuery)) {\n      score += Math.max(0, 100 - username.length);\n    }\n    \n    // Bonus for power badge and verification\n    if (user.power_badge) score += 50;\n    if (user.verified_addresses?.eth_addresses?.length) score += 30;\n    \n    // Bonus for follower count (logarithmic to avoid overwhelming)\n    score += Math.log10(user.follower_count + 1) * 10;\n    \n    return score;\n  };\n\nexport function ProfileSearch({\n  apiKey,\n  placeholder = \"Search Farcaster users...\",\n  variant = \"default\",\n  className,\n  inputClassName,\n  buttonClassName,\n  layout = \"horizontal\",\n  showIcon = true,\n  autoSearch = false,\n  maxResults = 5,\n  searchFunction,\n  userCardComponent: CustomUserCard,\n  onError,\n}: ProfileSearchProps) {\n  const [searchInput, setSearchInput] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(\"\");\n  const [searchResults, setSearchResults] = React.useState<FarcasterUser[]>([]);\n  const [totalResults, setTotalResults] = React.useState(0);\n  const { sdk, isSDKLoaded } = useMiniAppSdk();\n  console.log(searchFunction);\n  const defaultSearchFunction = async (query: string, apiKey: string, maxResults: number): Promise<{ users: FarcasterUser[], total: number }> => {\n    const response = await fetch(`https://api.neynar.com/v2/farcaster/user/search?q=${encodeURIComponent(query)}&limit=${maxResults}`, {\n      method: 'GET',\n      headers: {\n        'accept': 'application/json',\n        'api_key': apiKey,\n      },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `API Error: ${response.status}`);\n    }\n\n    const data: NeynarSearchResponse = await response.json();\n    \n    // Sort by relevance if multiple results\n    const sortedUsers = (data.result.users || [])\n      .map(user => ({ user, score: calculateRelevanceScore(user, query) }))\n      .sort((a, b) => b.score - a.score)\n      .map(item => item.user);\n    \n    return {\n      users: sortedUsers,\n      total: sortedUsers.length\n    };\n  };\n\n  const searchUsers = async (query: string) => {\n    if (!searchFunction && !apiKey.trim()) {\n      const errorMsg = \"API key is required\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n      return;\n    }\n\n    if (!query.trim()) {\n      const errorMsg = \"Please enter a search term\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(\"\");\n      \n      const searchFn = searchFunction || defaultSearchFunction;\n\n      const { users, total } = await searchFn(query, apiKey, maxResults);\n      setSearchResults(users);\n      setTotalResults(total);\n      \n      if (users.length === 0) {\n        const errorMsg = \"No users found matching your search\";\n        setError(errorMsg);\n        onError?.(errorMsg);\n      }\n    } catch (err) {\n      console.error(\"Error searching users:\", err);\n      const errorMsg = err instanceof Error ? err.message : \"Failed to search users\";\n      setError(errorMsg);\n      setSearchResults([]);\n      setTotalResults(0);\n      onError?.(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const viewProfile = async (fid: number) => {\n    try {\n      if (!isSDKLoaded) {\n        throw new Error(\"Farcaster SDK not loaded\");\n      }\n      \n      await sdk.actions.viewProfile({ fid });\n    } catch (err) {\n      console.error(\"Error viewing profile:\", err);\n      const errorMsg = err instanceof Error ? err.message : \"Failed to view profile\";\n      setError(errorMsg);\n      onError?.(errorMsg);\n    }\n  };\n\n  const handleSearch = async () => {\n    await searchUsers(searchInput);\n  };\n\n  const handleClear = () => {\n    setSearchInput(\"\");\n    setSearchResults([]);\n    setTotalResults(0);\n    setError(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    \n    setSearchInput(value);\n    setError(\"\");\n    if(value === \"\") {\n        setSearchResults([]);\n        setTotalResults(0);\n        return;\n    }\n    // Auto-search with debounce\n    if (autoSearch && value.length > 2) {\n      \n      const timeoutId = setTimeout(() => {\n        searchUsers(value);\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  };\n\n  const containerClasses = cn(\n    \"flex flex-col gap-4 w-full\",\n    className\n  );\n\n  const searchContainerClasses = cn(\n    \"flex gap-2 w-full\",\n    layout === \"vertical\" ? \"flex-col\" : \"flex-row\"\n  );\n\n  const hasMoreResults = totalResults > maxResults;\n  const hiddenResultsCount = totalResults - maxResults;\n\n  return (\n    <div className={containerClasses}>\n      {/* Search Input */}\n      <div className={searchContainerClasses}>\n        <div className=\"flex-1 flex gap-2\">\n          <Input\n            type=\"text\"\n            placeholder={placeholder}\n            value={searchInput}\n            onChange={handleInputChange}\n            onKeyPress={handleKeyPress}\n            className={cn(\n              \"w-full\",\n              error && \"border-red-500\",\n              inputClassName\n            )}\n          />\n          {searchInput && (\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={handleClear}\n            disabled={loading}\n            className=\"shrink-0\"\n            title=\"Clear search\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n        </div>\n        \n        {/* Clear Button - only show when there's a search term */}\n        <Button\n          variant={variant}\n          onClick={handleSearch}\n          disabled={loading || !searchInput.trim()  || !isSDKLoaded}\n          className={cn(\n            layout === \"vertical\" ? \"w-full\" : \"shrink-0\",\n            buttonClassName\n          )}\n        >\n          {loading ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n              Searching...\n            </>\n          ) : (\n            <>\n              {showIcon && <Search className=\"h-4 w-4 mr-2\" />}\n              Search\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"text-sm text-red-500 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-md p-3\">\n          {error}\n        </div>\n      )}\n\n      {/* Search Results */}\n      {searchResults.length > 0 && (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Users className=\"h-4 w-4\" />\n              Showing {searchResults.length} of {totalResults} user{totalResults !== 1 ? 's' : ''}\n            </div>\n            \n            {hasMoreResults && (\n              <div className=\"text-xs text-muted-foreground\">\n                +{hiddenResultsCount} more user{hiddenResultsCount !== 1 ? 's' : ''}...\n              </div>\n            )}\n          </div>\n          \n          <div className=\"grid gap-3\">\n            {searchResults.map((user) => {\n              const UserCardComponent = CustomUserCard || UserCard;\n              return (\n                <UserCardComponent\n                  key={user.fid}\n                  user={user}\n                  onClick={() => viewProfile(user.fid)}\n                />\n              );\n            })}\n          </div>\n          \n          {hasMoreResults && (\n            <div className=\"text-center py-2 text-xs text-muted-foreground border-t border-dashed\">\n              Showing most relevant results. {hiddenResultsCount} more user{hiddenResultsCount !== 1 ? 's' : ''} found.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// User Card Component\ntype UserCardProps = {\n  user: FarcasterUser;\n  onClick: () => void;\n};\n\nfunction UserCard({ user, onClick }: UserCardProps) {\n  return (\n    <div\n      onClick={onClick}\n      className=\"flex items-start sm:items-center gap-2 sm:gap-3 p-2 sm:p-3 border border-border rounded-lg hover:bg-accent/50 cursor-pointer transition-colors group\"\n    >\n      {/* Avatar */}\n      <div className=\"relative flex-shrink-0\">\n        {user.pfp_url ? (\n          <img\n            src={user.pfp_url}\n            alt={user.display_name || user.username}\n            className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-muted flex items-center justify-center\">\n            <User className=\"h-5 w-5 sm:h-6 sm:w-6 text-muted-foreground\" />\n          </div>\n        )}\n      </div>\n\n      {/* User Info */}\n      <div className=\"flex-1 min-w-0\">\n        {/* Name and FID row */}\n        <div className=\"mt-2\">\n        <div className=\"flex items-center flex-wrap gap-2\">\n          <h3 className=\"font-medium text-xs sm:text-sm truncate flex-1\">\n            {user.display_name || user.username}\n          </h3>\n          <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n            FID {user.fid}\n          </span>\n        </div>\n        \n        {/* Username */}\n        <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n          @{user.username}\n        </p>\n        </div>\n        {/* Bio */}\n        {user.profile?.bio?.text && (\n          <p className=\"text-xs text-muted-foreground mt-2 line-clamp-2 leading-tight\">\n            {user.profile.bio.text}\n          </p>\n        )}\n        \n        {/* Stats */}\n        <div className=\"flex flex-wrap items-center gap-3  mt-2 text-xs text-muted-foreground\">\n          <span className=\"whitespace-nowrap\">\n            {formatLargeNumber(user.follower_count)} followers\n          </span>\n          <span className=\"whitespace-nowrap\">\n            {formatLargeNumber(user.following_count)} following\n          </span>\n          \n        </div>\n      </div>    \n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/frame-sdk\";\nimport type { Context } from \"@farcaster/frame-core\";\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.FrameContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isSigningIn, setIsSigningIn] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\n      setLastEvent(`frameAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"frameRemoved\", () => {\n      setLastEvent(\"frameRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addFrame();\n      console.log(\"addFrame result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isSigningIn,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}