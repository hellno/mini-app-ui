{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-context",
  "type": "registry:component",
  "title": "User Context",
  "description": "Displays user information including avatar, username, and display name in a flexible layout",
  "dependencies": [
    ".",
    "@radix-ui/react-avatar",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "https://hellno-mini-app-ui.vercel.app/r/avatar.json",
    "https://hellno-mini-app-ui.vercel.app/r/use-profile.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/user-context/user-context.tsx",
      "content": "\"use client\";\r\n\r\nimport { useProfile } from \"@/registry/mini-app/hooks/use-profile\";\r\nimport { UserAvatar } from \"@/registry/mini-app/blocks/avatar/avatar\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype UserContextProps = {\r\n  showAvatar?: boolean;\r\n  showUsername?: boolean;\r\n  showDisplayName?: boolean;\r\n  showFid?: boolean;\r\n  avatarSize?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | number;\r\n  avatarShape?: \"circle\" | \"square\" | \"rounded\";\r\n  layout?: \"horizontal\" | \"vertical\";\r\n  className?: string;\r\n  textClassName?: string;\r\n  usernamePrefix?: string;\r\n  fidPrefix?: string;\r\n  onClick?: () => void;\r\n  clickable?: boolean;\r\n  avatarClickable?: boolean;\r\n};\r\n\r\nexport function UserContext({\r\n  showAvatar = true,\r\n  showUsername = true,\r\n  showDisplayName = true,\r\n  showFid = false,\r\n  avatarSize = \"md\",\r\n  avatarShape = \"circle\",\r\n  layout = \"horizontal\",\r\n  className = \"\",\r\n  textClassName = \"\",\r\n  usernamePrefix = \"@\",\r\n  fidPrefix = \"FID: \",\r\n  onClick,\r\n  clickable = false,\r\n  avatarClickable = false,\r\n}: UserContextProps) {\r\n  const profile = useProfile();\r\n  \r\n  const containerClasses = cn(\r\n    \"flex items-center gap-2\",\r\n    layout === \"vertical\" ? \"flex-col\" : \"flex-row\",\r\n    (onClick || (clickable && profile.fid)) ? \"cursor-pointer\" : \"\",\r\n    className\r\n  );\r\n  \r\n  const textContainerClasses = cn(\r\n    \"flex\",\r\n    layout === \"vertical\" ? \"flex-col items-center\" : \"flex-col justify-center\",\r\n    textClassName\r\n  );\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    } else if (clickable && profile.fid) {\r\n      profile.viewProfile(profile.fid);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={containerClasses} \r\n      onClick={onClick || clickable ? handleClick : undefined}\r\n    >\r\n      {showAvatar && (\r\n        <UserAvatar \r\n          useProfileData={true} \r\n          size={avatarSize}\r\n          shape={avatarShape}\r\n          clickable={avatarClickable}\r\n          onClickOverride={avatarClickable && onClick ? onClick : undefined}\r\n        />\r\n      )}\r\n      \r\n      <div className={textContainerClasses}>\r\n        {showDisplayName && profile.displayName && (\r\n          <span className=\"font-medium text-foreground\">\r\n            {profile.displayName}\r\n          </span>\r\n        )}\r\n        \r\n        {showUsername && profile.username && (\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            {usernamePrefix}{profile.username}\r\n          </span>\r\n        )}\r\n        \r\n        {showFid && profile.fid && (\r\n          <span className=\"text-xs text-muted-foreground\">\r\n            {fidPrefix}{profile.fid}\r\n          </span>\r\n        )}\r\n        \r\n        {!profile.displayName && !profile.username && !profile.fid && (\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            User not connected\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n} ",
      "type": "registry:component"
    },
    {
      "path": "registry\\mini-app\\blocks\\user-context\\user-context.tsx",
      "content": "\"use client\";\r\n\r\nimport { useProfile } from \"@/registry/mini-app/hooks/use-profile\";\r\nimport { UserAvatar } from \"@/registry/mini-app/blocks/avatar/avatar\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype UserContextProps = {\r\n  showAvatar?: boolean;\r\n  showUsername?: boolean;\r\n  showDisplayName?: boolean;\r\n  showFid?: boolean;\r\n  avatarSize?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | number;\r\n  avatarShape?: \"circle\" | \"square\" | \"rounded\";\r\n  layout?: \"horizontal\" | \"vertical\";\r\n  className?: string;\r\n  textClassName?: string;\r\n  usernamePrefix?: string;\r\n  fidPrefix?: string;\r\n  onClick?: () => void;\r\n  clickable?: boolean;\r\n  avatarClickable?: boolean;\r\n};\r\n\r\nexport function UserContext({\r\n  showAvatar = true,\r\n  showUsername = true,\r\n  showDisplayName = true,\r\n  showFid = false,\r\n  avatarSize = \"md\",\r\n  avatarShape = \"circle\",\r\n  layout = \"horizontal\",\r\n  className = \"\",\r\n  textClassName = \"\",\r\n  usernamePrefix = \"@\",\r\n  fidPrefix = \"FID: \",\r\n  onClick,\r\n  clickable = false,\r\n  avatarClickable = false,\r\n}: UserContextProps) {\r\n  const profile = useProfile();\r\n  \r\n  const containerClasses = cn(\r\n    \"flex items-center gap-2\",\r\n    layout === \"vertical\" ? \"flex-col\" : \"flex-row\",\r\n    (onClick || (clickable && profile.fid)) ? \"cursor-pointer\" : \"\",\r\n    className\r\n  );\r\n  \r\n  const textContainerClasses = cn(\r\n    \"flex\",\r\n    layout === \"vertical\" ? \"flex-col items-center\" : \"flex-col justify-center\",\r\n    textClassName\r\n  );\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    } else if (clickable && profile.fid) {\r\n      profile.viewProfile(profile.fid);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={containerClasses} \r\n      onClick={onClick || clickable ? handleClick : undefined}\r\n    >\r\n      {showAvatar && (\r\n        <UserAvatar \r\n          useProfileData={true} \r\n          size={avatarSize}\r\n          shape={avatarShape}\r\n          clickable={avatarClickable}\r\n          onClickOverride={avatarClickable && onClick ? onClick : undefined}\r\n        />\r\n      )}\r\n      \r\n      <div className={textContainerClasses}>\r\n        {showDisplayName && profile.displayName && (\r\n          <span className=\"font-medium text-foreground\">\r\n            {profile.displayName}\r\n          </span>\r\n        )}\r\n        \r\n        {showUsername && profile.username && (\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            {usernamePrefix}{profile.username}\r\n          </span>\r\n        )}\r\n        \r\n        {showFid && profile.fid && (\r\n          <span className=\"text-xs text-muted-foreground\">\r\n            {fidPrefix}{profile.fid}\r\n          </span>\r\n        )}\r\n        \r\n        {!profile.displayName && !profile.username && !profile.fid && (\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            User not connected\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n} ",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\hooks\\use-profile.ts",
      "content": "\"use client\";\r\n\r\nimport { useMiniAppSdk } from \"./use-miniapp-sdk\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\n\r\nexport type ProfileData = {\r\n  fid?: number;\r\n  username?: string;\r\n  displayName?: string;\r\n  pfpUrl?: string;\r\n};\r\n\r\n/**\r\n * Hook to access the user profile information from the Farcaster SDK context\r\n * @returns ProfileData object containing user information and functions to interact with profiles\r\n */\r\nexport function useProfile() {\r\n  const { context, isSDKLoaded, sdk } = useMiniAppSdk();\r\n  const [profile, setProfile] = useState<ProfileData>({});\r\n\r\n  useEffect(() => {\r\n    if (isSDKLoaded && context?.user) {\r\n      setProfile({\r\n        fid: context.user.fid,\r\n        username: context.user.username,\r\n        displayName: context.user.displayName,\r\n        pfpUrl: context.user.pfpUrl,\r\n      });\r\n    }\r\n  }, [context, isSDKLoaded]);\r\n\r\n  /**\r\n   * View a user's Farcaster profile\r\n   * @param fid - Farcaster ID of the user whose profile to view\r\n   */\r\n  const viewProfile = useCallback(async (fid?: number) => {\r\n    if (!fid) {\r\n      console.warn(\"No FID provided to viewProfile\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await sdk.actions.viewProfile({ fid });\r\n    } catch (error) {\r\n      console.error(\"Error viewing profile:\", error);\r\n    }\r\n  }, [sdk]);\r\n\r\n  /**\r\n   * View the current user's profile or another user's profile if fid is provided\r\n   */\r\n  const viewCurrentOrSpecificProfile = useCallback((specificFid?: number) => {\r\n    const fidToView = specificFid || profile.fid;\r\n    if (fidToView) {\r\n      viewProfile(fidToView);\r\n    }\r\n  }, [profile.fid, viewProfile]);\r\n\r\n  return {\r\n    ...profile,\r\n    viewProfile,\r\n    viewCurrentOrSpecificProfile\r\n  };\r\n} ",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\blocks\\avatar\\avatar.tsx",
      "content": "\"use client\";\r\n\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/registry/mini-app/ui/avatar\";\r\nimport { useProfile } from \"@/registry/mini-app/hooks/use-profile\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype UserAvatarProps = {\r\n  src?: string;\r\n  fallback?: string;\r\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | number;\r\n  shape?: \"circle\" | \"square\" | \"rounded\";\r\n  className?: string;\r\n  useProfileData?: boolean;\r\n  fallbackClassName?: string;\r\n  clickable?: boolean;\r\n  onClickOverride?: () => void;\r\n};\r\n\r\nexport function UserAvatar({\r\n  src,\r\n  fallback,\r\n  size = \"md\",\r\n  shape = \"circle\",\r\n  className = \"\",\r\n  useProfileData = false,\r\n  fallbackClassName = \"\",\r\n  clickable = false,\r\n  onClickOverride,\r\n}: UserAvatarProps) {\r\n  const profile = useProfile();\r\n  \r\n  // Use profile data if requested and available\r\n  const avatarSrc = useProfileData && profile.pfpUrl ? profile.pfpUrl : src;\r\n  \r\n  // Generate fallback text from profile or use provided fallback\r\n  const getFallbackText = () => {\r\n    if (fallback) return fallback;\r\n    if (useProfileData && profile.displayName) {\r\n      return profile.displayName.substring(0, 2).toUpperCase();\r\n    }\r\n    if (useProfileData && profile.username) {\r\n      return profile.username.substring(0, 2).toUpperCase();\r\n    }\r\n    return \"FC\";\r\n  };\r\n\r\n  // Size classes for predefined sizes\r\n  const sizeClasses = {\r\n    xs: \"h-6 w-6 text-xs\",\r\n    sm: \"h-8 w-8 text-sm\",\r\n    md: \"h-10 w-10 text-base\",\r\n    lg: \"h-12 w-12 text-lg\",\r\n    xl: \"h-16 w-16 text-xl\",\r\n    \"2xl\": \"h-20 w-20 text-2xl\",\r\n  };\r\n  \r\n  // Shape classes\r\n  const shapeClasses = {\r\n    circle: \"rounded-full\",\r\n    square: \"rounded-none\",\r\n    rounded: \"rounded-lg\",\r\n  };\r\n  \r\n  // Custom size if number is provided\r\n  const customSizeStyle = typeof size === 'number' ? { \r\n    width: `${size}px`, \r\n    height: `${size}px`,\r\n    fontSize: `${Math.max(size / 3, 12)}px`\r\n  } : {};\r\n\r\n  const handleClick = () => {\r\n    if (onClickOverride) {\r\n      onClickOverride();\r\n    } else if (clickable && useProfileData && profile.fid) {\r\n      profile.viewProfile(profile.fid);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Avatar \r\n      className={cn(\r\n        typeof size === 'string' ? sizeClasses[size] : \"\",\r\n        shapeClasses[shape],\r\n        \"border-0 ring-0 outline-none\",\r\n        clickable && (useProfileData && profile.fid) ? \"cursor-pointer hover:opacity-80\" : \"\",\r\n        className\r\n      )}\r\n      style={customSizeStyle}\r\n      onClick={clickable || onClickOverride ? handleClick : undefined}\r\n    >\r\n      <AvatarImage src={avatarSrc} alt=\"User Avatar\" className=\"object-cover\" />\r\n      <AvatarFallback className={cn(\r\n        shapeClasses[shape],\r\n        fallbackClassName\r\n      )}>\r\n        {getFallbackText()}\r\n      </AvatarFallback>\r\n    </Avatar>\r\n  );\r\n} ",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\avatar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Avatar({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\r\n  return (\r\n    <AvatarPrimitive.Root\r\n      data-slot=\"avatar\"\r\n      className={cn(\r\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction AvatarImage({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\r\n  return (\r\n    <AvatarPrimitive.Image\r\n      data-slot=\"avatar-image\"\r\n      className={cn(\"aspect-square size-full\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction AvatarFallback({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\r\n  return (\r\n    <AvatarPrimitive.Fallback\r\n      data-slot=\"avatar-fallback\"\r\n      className={cn(\r\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n\r\nexport const formatLargeNumber = (num?: number): string => {\r\n  if (!num) return '0';\r\n\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1) + 'M';\r\n  } else if (num >= 2000) {\r\n    return (num / 1000).toFixed(1) + 'K';\r\n  } else {\r\n    return num.toString();\r\n  }\r\n};",
      "type": "registry:lib",
      "target": ""
    }
  ]
}