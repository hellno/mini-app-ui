{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "share-cast-button",
  "type": "registry:component",
  "title": "Share Cast Button",
  "description": "A button for sharing a cast",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core"
  ],
  "registryDependencies": [
    "button",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/share-cast-button/share-cast-button.tsx",
      "content": "import { Button } from \"@/registry/mini-app/ui/button\";\r\nimport { Share } from \"lucide-react\";\r\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\r\nimport { useMemo } from \"react\";\r\n\r\ntype ShareCastButtonProps = {\r\n  text: string;\r\n  url?: string;\r\n  variant?: \"destructive\" | \"secondary\" | \"ghost\" | \"default\";\r\n  className?: string;\r\n};\r\n\r\nexport function ShareCastButton({\r\n  text,\r\n  url,\r\n  variant = \"default\",\r\n  className,\r\n}: ShareCastButtonProps) {\r\n  const { sdk } = useMiniAppSdk();\r\n\r\n  const shareUrl = useMemo(() => {\r\n    let share = `https://warpcast.com/~/compose?text=${encodeURIComponent(text)}`;\r\n    if (url) {\r\n      share += `&embeds[]=${encodeURIComponent(url)}`;\r\n    }\r\n    return share;\r\n  }, [text, url]);\r\n\r\n  const onShare = async (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n  ) => {\r\n    const frameContext = await sdk.context;\r\n    if (frameContext) {\r\n      e.preventDefault();\r\n      let cast: { text: string; embeds: [] | [string] } = {\r\n        text,\r\n        embeds: [],\r\n      };\r\n      if (url) {\r\n        cast.embeds = [url];\r\n      }\r\n      sdk.actions.composeCast(cast);\r\n    } else if (shareUrl) {\r\n      window.open(shareUrl, \"_blank\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      onClick={(e) => onShare(e)}\r\n      size=\"default\"\r\n      className={className || \"\"}\r\n    >\r\n      <Share className=\"h-4 w-4 md:h-5 md:w-5\" />\r\n      Share\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry\\mini-app\\blocks\\share-cast-button\\share-cast-button.tsx",
      "content": "import { Button } from \"@/registry/mini-app/ui/button\";\r\nimport { Share } from \"lucide-react\";\r\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\r\nimport { useMemo } from \"react\";\r\n\r\ntype ShareCastButtonProps = {\r\n  text: string;\r\n  url?: string;\r\n  variant?: \"destructive\" | \"secondary\" | \"ghost\" | \"default\";\r\n  className?: string;\r\n};\r\n\r\nexport function ShareCastButton({\r\n  text,\r\n  url,\r\n  variant = \"default\",\r\n  className,\r\n}: ShareCastButtonProps) {\r\n  const { sdk } = useMiniAppSdk();\r\n\r\n  const shareUrl = useMemo(() => {\r\n    let share = `https://warpcast.com/~/compose?text=${encodeURIComponent(text)}`;\r\n    if (url) {\r\n      share += `&embeds[]=${encodeURIComponent(url)}`;\r\n    }\r\n    return share;\r\n  }, [text, url]);\r\n\r\n  const onShare = async (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\r\n  ) => {\r\n    const frameContext = await sdk.context;\r\n    if (frameContext) {\r\n      e.preventDefault();\r\n      let cast: { text: string; embeds: [] | [string] } = {\r\n        text,\r\n        embeds: [],\r\n      };\r\n      if (url) {\r\n        cast.embeds = [url];\r\n      }\r\n      sdk.actions.composeCast(cast);\r\n    } else if (shareUrl) {\r\n      window.open(shareUrl, \"_blank\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      onClick={(e) => onShare(e)}\r\n      size=\"default\"\r\n      className={className || \"\"}\r\n    >\r\n      <Share className=\"h-4 w-4 md:h-5 md:w-5\" />\r\n      Share\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\ui\\button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"button\"> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean\r\n  }) {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n\r\nexport const formatLargeNumber = (num?: number): string => {\r\n  if (!num) return '0';\r\n\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1) + 'M';\r\n  } else if (num >= 2000) {\r\n    return (num / 1000).toFixed(1) + 'K';\r\n  } else {\r\n    return num.toString();\r\n  }\r\n};",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry\\mini-app\\hooks\\use-miniapp-sdk.ts",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport sdk from \"@farcaster/frame-sdk\";\r\nimport type { Context } from \"@farcaster/frame-core\";\r\nexport function useMiniAppSdk() {\r\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\r\n\r\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\r\n  const [context, setContext] = useState<Context.FrameContext>();\r\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\r\n  const [lastEvent, setLastEvent] = useState(\"\");\r\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\r\n  const [isSigningIn, setIsSigningIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!sdk) return;\r\n\r\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\r\n      setLastEvent(\r\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\r\n      );\r\n      setIsMiniAppSaved(true);\r\n    });\r\n\r\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\r\n      setLastEvent(`frameAddRejected, reason ${reason}`);\r\n    });\r\n\r\n    sdk.on(\"frameRemoved\", () => {\r\n      setLastEvent(\"frameRemoved\");\r\n      setIsMiniAppSaved(false);\r\n    });\r\n\r\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\r\n      setLastEvent(\"notificationsEnabled\");\r\n    });\r\n\r\n    sdk.on(\"notificationsDisabled\", () => {\r\n      setLastEvent(\"notificationsDisabled\");\r\n    });\r\n\r\n    // CRITICAL TO LOAD MINI APP - DON'T REMOVE\r\n    sdk.actions.ready({});\r\n    setIsSDKLoaded(true);\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      sdk.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateContext = async () => {\r\n      const frameContext = await sdk.context;\r\n      if (frameContext) {\r\n        setContext(frameContext);\r\n        setIsMiniAppSaved(frameContext.client.added);\r\n      }\r\n    };\r\n\r\n    if (isSDKLoaded) {\r\n      updateContext();\r\n    }\r\n  }, [isSDKLoaded]);\r\n\r\n  const pinFrame = useCallback(async () => {\r\n    try {\r\n      const result = await sdk.actions.addFrame();\r\n      console.log(\"addFrame result\", result);\r\n      // @ts-expect-error - result type mixup\r\n      if (result.added) {\r\n        setPinFrameResponse(\r\n          result.notificationDetails\r\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\r\n            : \"Added, got no notification details\",\r\n        );\r\n      }\r\n    } catch (error) {\r\n      setPinFrameResponse(`Error: ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    context,\r\n    pinFrame,\r\n    pinFrameResponse,\r\n    isMiniAppSaved,\r\n    lastEvent,\r\n    sdk,\r\n    isSDKLoaded,\r\n    isAuthDialogOpen,\r\n    setIsAuthDialogOpen,\r\n    isSigningIn,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "meta": {
    "mediaUrl": "/previews/share-cast-button.mp4",
    "demoUrl": "/component/share-cast-button"
  }
}