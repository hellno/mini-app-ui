name: Test Registry Installations

on:
  push:
    branches: [main]
    paths:
      - 'registry/**'
      - 'registry.json'
      - 'public/r/**'
  pull_request:
    branches: [main]
    paths:
      - 'registry/**'
      - 'registry.json'
      - 'public/r/**'
  workflow_dispatch:

jobs:
  test-installations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout registry repo
        uses: actions/checkout@v4
        with:
          path: registry-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Create test Next.js app
        run: |
          echo -e "Y\nNo\n" | npx create-next-app@latest test-app --typescript --tailwind --app --no-src-dir --import-alias "@/*" --use-pnpm --no-install --no-eslint
          cd test-app
          pnpm install
          echo -e "Y\n\n\n\n\n\n\n\n" | pnpm dlx shadcn@latest init

      - name: Start local registry server
        run: |
          cd registry-repo
          # Start a simple HTTP server to serve the registry files
          python3 -m http.server 8080 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          # Wait for server to start
          sleep 2

      - name: Build registry files
        run: |
          cd registry-repo
          # Install dependencies and build registry
          pnpm install --frozen-lockfile
          pnpm registry:build
          
      - name: Modify registry files for local testing
        run: |
          cd registry-repo/public/r
          # Create a script to update registryDependencies to use full URLs
          cat > update-deps.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Get all JSON files
          const files = fs.readdirSync('.').filter(f => f.endsWith('.json'));
          
          files.forEach(file => {
            if (file === 'registry.json') return;
            
            const content = JSON.parse(fs.readFileSync(file, 'utf8'));
            
            // Update registryDependencies to use full URLs
            if (content.registryDependencies) {
              content.registryDependencies = content.registryDependencies.map(dep => {
                // If it's already a URL, leave it
                if (dep.startsWith('http')) return dep;
                // Otherwise, convert to local URL
                return `http://localhost:8080/public/r/${dep}.json`;
              });
            }
            
            fs.writeFileSync(file, JSON.stringify(content, null, 2));
          });
          
          console.log('Updated registry files with local URLs');
          EOF
          
          node update-deps.js

      - name: Test component installations
        run: |
          cd test-app
          
          # Extract component names from registry.json
          COMPONENTS=$(node -e "
            const registry = require('../registry-repo/registry.json');
            const components = registry.items.map(item => item.name);
            console.log(components.join(' '));
          ")
          
          echo "Testing installation of components: $COMPONENTS"
          
          # Track failed installations
          FAILED=""
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          
          # Test each component installation
          for component in $COMPONENTS; do
            echo ""
            echo "Testing: $component"
            echo "----------------------------------------"
            
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            
            # Run shadcn add command with timeout - using direct URL to local server
            if timeout 60 pnpm dlx shadcn@latest add "http://localhost:8080/public/r/${component}.json" --yes --overwrite; then
              echo "✅ $component installed successfully"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "❌ $component installation failed"
              FAILED="$FAILED $component"
            fi
          done
          
          # Report results
          echo ""
          echo "========================================"
          echo "Installation Summary:"
          echo "✅ Successful: $SUCCESS_COUNT/$TOTAL_COUNT"
          if [ -z "$FAILED" ]; then
            echo "🎉 All components installed successfully!"
          else
            echo "❌ Failed installations:$FAILED"
            exit 1
          fi

      - name: Check installed files
        if: success()
        run: |
          cd test-app
          echo "Installed component files:"
          find components lib hooks -type f -name "*.tsx" -o -name "*.ts" 2>/dev/null | sort || true

      - name: Stop local server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi